<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[npm学习笔记]]></title>
      <url>http://yoursite.com/2016/07/20/npm%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<img src="/2016/07/20/npm学习笔记/npm.png" alt="npm学习笔记" title="npm学习笔记">
<hr>
<h2 id="npm简介"><a href="#npm简介" class="headerlink" title="npm简介"></a><center>npm简介</center></h2><blockquote><p>npm 是 2009 年开始的一个 javascript<br>模块管理工具，也是最流行的代码共享平台之一。2013 年 npm 的模块总数是 4 万，2014 年就升到 8 万以上，超过所有其他同类平台。今年 4 月 npm官方（<a href="http://blog.npmjs.org/post/143451680695/how-many-npm-users-are-there" target="_blank" rel="external">http://blog.npmjs.org/post/143451680695/how-many-npm-users-are-there</a> ）发了一份统计，截止 4 月全球估计有 4 百万用户使用 npm，并且这个数字每年会翻一倍。</p>
</blockquote>
<p>  NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上<br>很多问题，常见的使用场景有以下几种：</p>
<ul>
<li>允许用户从NPM服务器下载别人编写的第三方包到本地使用。</li>
<li>允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。</li>
<li>允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</li>
</ul>
<p>npm不需要单独安装。在安装Node的时候，会连带一起安装npm。安装doe移步至<a href="https://nodejs.org/en/download/" target="_blank" rel="external">node官网</a>。另外，Node附带的npm如果不是最新版本，可以用下面的命令，更新到最新版本<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install npm@latest -g</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="npm命令大全"><a href="#npm命令大全" class="headerlink" title="npm命令大全"></a><center>npm命令大全</center></h2><h3 id="2-1简单查询"><a href="#2-1简单查询" class="headerlink" title="2.1简单查询"></a>2.1简单查询</h3><blockquote>
<p>查看 npm 命令列表<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm help</div></pre></td></tr></table></figure></p>
<p>查看各个命令的简单用法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm -l</div></pre></td></tr></table></figure></p>
<p>查看当前npm 的版本<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm -v</div></pre></td></tr></table></figure></p>
<p>查看 npm 的配置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm config list -l</div></pre></td></tr></table></figure></p>
<p>以树型结构列出当前项目安装的所有模块，以及它们依赖的模块<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm ls</div></pre></td></tr></table></figure></p>
<p>列出所有全局安装的模块<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm ls -g</div></pre></td></tr></table></figure></p>
<p>全局和本地的依赖包的安装路径<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm root - g </div><div class="line">$ npm root</div></pre></td></tr></table></figure></p>
<p>查看全局或者本地的依赖包<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm list -g </div><div class="line">$ npm list</div></pre></td></tr></table></figure></p>
<p>查看依赖包的package.json 的信息，也可以单独查找某一个配置项<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ npm view &lt;package name&gt; </div><div class="line">$ npm view &lt;package name&gt; dependencies  <span class="comment">//查看gulp包的依赖关系</span></div><div class="line">$ npm view &lt;package name&gt; repository.url  <span class="comment">//查看gulp包的源文件地址</span></div></pre></td></tr></table></figure></p>
<p>搜索远程资源库中的依赖包，当在需要发布一个依赖包的时候，可以用这个命令。查找是否已有依赖包<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm search &lt;package name&gt;</div></pre></td></tr></table></figure></p>
<p>查看某个包的信息<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm info &lt;package name&gt;</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="2-2-npm-init命令"><a href="#2-2-npm-init命令" class="headerlink" title="2.2  npm init命令"></a>2.2  npm init命令</h3><h4 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h4><p>npm init用来初始化生成一个新的package.json文件,package.json是基于nodejs项目必不可少的配置文件，它是存放在项目根目录的普通json文件.它会引导用户设置一系列配置，如果你觉得不用修改默认配置，一路回车就可以了。<br><span style="color:#931F1D">(注意：json文件内是不能写注释的，下面代码的注释是方便学习的笔记，一个最简单的例子)</span></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  "name": "test",   //项目名称（必须）</div><div class="line">  "version": "1.0.0",   //项目版本（必须）</div><div class="line">  "description": "This is for study npm project !",   //项目描述（必须）</div><div class="line">  "homepage": "",   //项目主页</div><div class="line">  "repository": &#123;    //项目资源库</div><div class="line">    "type": "git",</div><div class="line">    "url": "https://git.oschina.net/xxxx"</div><div class="line">  &#125;,</div><div class="line">  "author": &#123;    //项目作者信息</div><div class="line">    "name": "oysun",</div><div class="line">    "email": "web-oysun@qq.com"</div><div class="line">  &#125;,</div><div class="line">  "license": "ISC",    //项目许可协议</div><div class="line">  "devDependencies": &#123;    //项目依赖的插件</div><div class="line">    "gulp": "^3.8.11",</div><div class="line">    "gulp-less": "^3.0.0"</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Package-json-属性说明"><a href="#Package-json-属性说明" class="headerlink" title="Package.json 属性说明"></a>Package.json 属性说明</h4><p><code>name</code></p>
<ul>
<li>在package.json中最重要的就是name和version字段。他们都是必须的，如果没有就无法install。name和version一起组成的标识在假设中是唯一的。改变包应该同时改变version</li>
<li>这个名字可能会作为参数被传入require()，所以它应该比较短，但也要意义清晰</li>
<li>name必须小于等于214个字节，包括前缀名称在内（如xxx/xxxmodule）</li>
<li>name不能以”_”或”.”开头</li>
<li>不能含有大写字母</li>
<li>name会成为url的一部分，不能含有url非法字符</li>
<li>创建一个模块前可以先到后边的网址查查name是否已经被占用.<a href="https://www.npmjs.com/" target="_blank" rel="external">https://www.npmjs.com/</a></li>
</ul>
<p><code>version</code></p>
<ul>
<li>version必须可以被npm依赖的一个node-semver模块解析。具体规则见下面的dependencies模块</li>
</ul>
<p><code>description</code> </p>
<ul>
<li>一个描述，方便别人了解你的模块作用，搜索的时候也有用</li>
</ul>
<p><code>homepage</code></p>
<ul>
<li>这个项目主页url和url属性不同，如果你填写了url属性，npm注册工具会认为你把项目发布到其他地方了，获取模块的时候不会从npm官方仓库获取，而是会重定向到url属性配置的地址</li>
</ul>
<p><code>keywords</code></p>
<ul>
<li>一个字符串数组，方便别人搜索到本模块</li>
</ul>
<p><code>author</code></p>
<ul>
<li>包的作者姓名</li>
</ul>
<p><code>bugs</code></p>
<ul>
<li><p>你项目的提交问题的url和（或）邮件地址。这对遇到问题的屌丝很有帮助。例子：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attr">"url"</span> : <span class="string">"http://github.com/owner/project/issues"</span>,</div><div class="line">  <span class="attr">"email"</span> : <span class="string">"project@hostname.com"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>你可以指定一个或者指定两个。如果你只想提供一个url，那就不用对象了，字符串就行。<br>如果提供了url，它会被npm bugs命令使用。</p>
</li>
</ul>
<p><code>license</code></p>
<ul>
<li><p>指定一个许可证，让人知道使用的权利和限制的。最简单的方法是，假如你用一个像BSD或者MIT这样通用的许可证，就只需要指定一个许可证的名字，像这样：{ “license” : “BSD” }如果你有更复杂的许可条件，或者想要提供给更多地细节，可以这样:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">"licenses" : [</div><div class="line">  &#123; "type" : "MyLicense"</div><div class="line">  , "url" : "http://github.com/owner/project/path/to/license"</div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
</li>
<li><p>你可以在<a href="https://spdx.org/licenses/" target="_blank" rel="external">https://spdx.org/licenses/</a> 这个地址查阅协议列表</p>
</li>
</ul>
<p><code>files</code></p>
<ul>
<li>files是一个包含项目中的文件的数组。如果命名了一个文件夹，那也会包含文件夹中的文件。（除非被其他条件忽略了）你也可以提供一个.npmignore文件，让即使被包含在files字段中得文件被留下。其实就像.<code>gitignore</code>一样。</li>
<li><code>main</code></li>
<li>main字段配置一个文件名指向模块的入口程序。如果你包的名字叫foo，然后用户require(“foo”)，main配置的模块的exports对象会被返回。<br>这应该是一个相对于根目录的文件路径。对大对数模块而言，这个属性更多的是让模块有一个主入口文件，然而很多模块并不写这个属性</li>
</ul>
<p>bin`</p>
<ul>
<li><p>很多包都有一个或多个可执行的文件希望被放到PATH中。npm让妈妈再也不用担心了（实际上npm本身也是通过bin属性安装为一个可执行命令的）。要用这个功能，给package.json中的bin字段一个命令名到文件位置的map。初始化的时候npm会将他链接到prefix/bin（全局初始化）或者./node_modules/.bin/（本地初始化）。<br>比如，npm有：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attr">"bin"</span> : &#123; <span class="attr">"npm"</span> : <span class="string">"./cli.js"</span> &#125; &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>所以，当你初始化npm，它会创建一个符号链接到cli.js脚本到/usr/local/bin/npm。如果你只有一个可执行文件，并且名字和包名一样。那么你可以只用一个字符串，比如：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attr">"name"</span>: <span class="string">"my-program"</span></div><div class="line">, <span class="attr">"version"</span>: <span class="string">"1.2.5"</span></div><div class="line">, <span class="attr">"bin"</span>: <span class="string">"./path/to/program"</span> &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>结果和这个一样：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attr">"name"</span>: <span class="string">"my-program"</span></div><div class="line">, <span class="attr">"version"</span>: <span class="string">"1.2.5"</span></div><div class="line">, <span class="attr">"bin"</span> : &#123; <span class="attr">"my-program"</span> : <span class="string">"./path/to/program"</span> &#125; &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><code>man</code></p>
<ul>
<li><p>指定一个单一的文件或者一个文件数组供man程序使用。如果只提供一个单一的文件，那么它初始化后就是man<pkgname>的结果，而不管实际的文件名是神马，比如：</pkgname></p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attr">"name"</span> : <span class="string">"foo"</span></div><div class="line">, <span class="attr">"version"</span> : <span class="string">"1.2.3"</span></div><div class="line">, <span class="attr">"description"</span> : <span class="string">"A packaged foo fooer for fooing foos"</span></div><div class="line">, <span class="attr">"main"</span> : <span class="string">"foo.js"</span></div><div class="line">, <span class="attr">"man"</span> : <span class="string">"./man/doc.1"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>这样man foo就可以用到./man/doc.1文件了。如果文件名不是以包开头，那么它会被冠以前缀，下面的:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attr">"name"</span> : <span class="string">"foo"</span></div><div class="line">, <span class="attr">"version"</span> : <span class="string">"1.2.3"</span></div><div class="line">, <span class="attr">"description"</span> : <span class="string">"A packaged foo fooer for fooing foos"</span></div><div class="line">, <span class="attr">"main"</span> : <span class="string">"foo.js"</span></div><div class="line">, <span class="attr">"man"</span> : [ <span class="string">"./man/foo.1"</span>, <span class="string">"./man/bar.1"</span> ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>会为man foo和man foo-bar创建文件。man文件需要以数字结束，然后可选地压缩后以.gz为后缀。The number dictates which man section the file is installed into.</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attr">"name"</span> : <span class="string">"foo"</span></div><div class="line">, <span class="attr">"version"</span> : <span class="string">"1.2.3"</span></div><div class="line">, <span class="attr">"description"</span> : <span class="string">"A packaged foo fooer for fooing foos"</span></div><div class="line">, <span class="attr">"main"</span> : <span class="string">"foo.js"</span></div><div class="line">, <span class="attr">"man"</span> : [ <span class="string">"./man/foo.1"</span>, <span class="string">"./man/foo.2"</span> ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>会为man foo和man 2 foo创建。</p>
</li>
</ul>
<p><code>directories</code></p>
<ul>
<li>CommonJS Packages规范说明了几种方式让你可以用directorieshash标示出包得结构。如果看一下npm’s package.json，你会看到有directories标示出doc, lib, and man。<br>在未来，这个信息可能会被用到。</li>
</ul>
<p><code>directories.lib</code></p>
<ul>
<li>告其他人你的库文件夹在哪里。目前没有什么特别的东西需要用到lib文件夹，但确实是重要的元信息。</li>
</ul>
<p><code>directories.bin</code></p>
<ul>
<li>如果你指定一个“bin”目录，然后在那个文件夹中得所有文件都会被当做”bin”字段使用。如果你已经指定了“bin”字段，那这个就无效。</li>
</ul>
<p><code>directories.man</code></p>
<ul>
<li>一个放满man页面的文件夹。贴心地创建一个“man”字段。</li>
</ul>
<p><code>directories.doc</code></p>
<ul>
<li>在这个目录里边放一些markdown文件，可能最终有一天它们会被友好的展现出来（应该是在npm的网站上） 我要说话</li>
</ul>
<p><code>directories.example</code></p>
<ul>
<li>放一些示例脚本，或许某一天会有用</li>
</ul>
<p><code>repository</code></p>
<ul>
<li>指定你的代码存放的地方。这个对希望贡献的人有帮助。如果git仓库在github上，那么npm docs命令能找到你。这样做：<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">"repository" :</div><div class="line">  &#123; "type" : "git"</div><div class="line">  , "url" : "http://github.com/isaacs/npm.git"</div><div class="line">  &#125;</div><div class="line"></div><div class="line">"repository" :</div><div class="line">  &#123; "type" : "svn"</div><div class="line">  , "url" : "http://v8.googlecode.com/svn/trunk/"</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><code>scripts</code></p>
<ul>
<li>scripts属性是一个对象，里边指定了项目的生命周期个各个环节需要执行的命令。key是生命周期中的事件，value是要执行的命令。具体的内容有 install start stop 等，详见: <a href="https://docs.npmjs.com/misc/scripts" target="_blank" rel="external">https://docs.npmjs.com/misc/scripts</a></li>
</ul>
<p><code>config</code></p>
<ul>
<li><p>用来设置一些项目不怎么变化的项目配置，例如port等。用户用的时候可以使用如下用法：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http.createServer(...).listen(process.env.npm_package_config_port)</div></pre></td></tr></table></figure>
</li>
<li><p>可以通过npm config set foo:port 80来修改config。详见 <a href="https://docs.npmjs.com/misc/config" target="_blank" rel="external">https://docs.npmjs.com/misc/config</a></p>
</li>
</ul>
<p><code>dependencies</code></p>
<ul>
<li>dependencies属性是一个对象，配置模块依赖的模块列表，key是模块名称，value是版本范围，版本范围是一个字符，可以被一个或多个空格分割。dependencies也可以被指定为一个git地址或者一个压缩包地址。不要把测试工具或transpilers写到dependencies中。 下面是一些写法，详见<a href="https://docs.npmjs.com/misc/semver" target="_blank" rel="external">https://docs.npmjs.com/misc/semver</a></li>
</ul>
<p><code>devDependencies</code></p>
<ul>
<li>如果有人想要下载并使用你的模块，也许他们并不希望或需要下载一些你在开发过程中使用的额外的测试或者文档框架。在这种情况下，最好的方法是把这些依赖添加到devDependencies属性的对象中。这些模块会在npm link或者npm install的时候被安装，也可以像其他npm配置一样被管理，详见npm的config文档。对于一些跨平台的构建任务，例如把CoffeeScript编译成JavaScript，就可以通过在package.json的script属性里边配置prepublish脚本来完成这个任务，然后需要依赖的coffee-script模块就写在devDependencies属性种。例如:<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attr">"name"</span>: <span class="string">"ethopia-waza"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">"a delightfully fruity coffee varietal"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.2.3"</span>,</div><div class="line">  <span class="attr">"devDependencies"</span>: &#123;</div><div class="line">    <span class="attr">"coffee-script"</span>: <span class="string">"~1.6.3"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"prepublish"</span>: <span class="string">"coffee -o lib/ -c src/waza.coffee"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"main"</span>: <span class="string">"lib/waza.js"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2-3-包安装命令"><a href="#2-3-包安装命令" class="headerlink" title="2.3 包安装命令"></a>2.3 包安装命令</h3><p>npm的包安装分为本地安装（local）、全局安装（global）两种，从敲的命令行来看，差别只是有没有-g而已.</p>
<ul>
<li>但是代码中，直接通过require()的方式是没有办法调用全局安装的包的。全局的安装是供命令行使用的。</li>
<li>每个模块可以“全局安装”，也可以“本地安装”。“全局安装”指的是将一个模块安装到系统目录中，各个项目都可以调用。一般来说，全局安装只适用于工具模块，比如eslint和gulp。“本地安装”指的是将一个模块下载到当前项目的node_modules子目录，然后只有在项目目录之中，才能调用这个模块</li>
</ul>
<blockquote>
<p>本地安装<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install &lt;package name&gt;</div></pre></td></tr></table></figure></p>
<p>全局安装<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install &lt;package name&gt; -global</div><div class="line">$ npm install &lt;package name&gt; -g</div></pre></td></tr></table></figure></p>
<p>npm install也支持直接输入Github代码库地址<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install git:<span class="comment">//github.com/package/path.git</span></div><div class="line">$ npm install git:<span class="comment">//github.com/package/path.git#0.1.0</span></div></pre></td></tr></table></figure></p>
<p>install命令总是安装模块的最新版本，如果要安装模块的特定版本，可以在模块名后面加上@和版本号。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ npm install &lt;package name&gt;@latest</div><div class="line">$ npm install &lt;package name&gt;@<span class="number">0.1</span><span class="number">.1</span></div><div class="line">$ npm install &lt;package name&gt;@<span class="string">"&gt;=1.9.0 &lt;3.1.0"</span></div></pre></td></tr></table></figure></p>
<p>如果使用–save-exact参数，会在package.json文件指定安装模块的确切版本<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install &lt;package name&gt; --save-exact </div><div class="line">$ npm install &lt;package name&gt; -E</div></pre></td></tr></table></figure></p>
<p>安装包信息将加入到dependencies（生产阶段的依赖）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install &lt;package name&gt; --save </div><div class="line">$ npm install &lt;package name&gt; -S</div></pre></td></tr></table></figure></p>
<p>安装包信息将加入到devDependencies（开发阶段的依赖），所以开发阶段一般使用它<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install &lt;package name&gt; --save-dev </div><div class="line">$ npm install &lt;package name&gt; -D</div></pre></td></tr></table></figure></p>
</blockquote>
<p><em>install命令可以使用不同参数，指定所安装的模块属于哪一种性质的依赖关系，即出现在packages.json文件的哪一项中</em></p>
<blockquote>
<blockquote>
<p>–save：模块名将被添加到dependencies，可以简化为参数-S。<br>–save-dev: 模块名将被添加到devDependencies，可以简化为参数-D</p>
</blockquote>
</blockquote>
<p><span style="color:#931F1D;background-color:#fcf8e3;">一旦安装了某个模块，就可以在代码中用require命令加载这个模块。另外，模块的依赖都被写入了package.json文件后，他人打开项目的根目录（项目开源、内部团队合作），使用npm install命令可以根据dependencies配置安装所有的依赖包</span></p>
<h3 id="2-4-包移除，更新插件命令"><a href="#2-4-包移除，更新插件命令" class="headerlink" title="2.4 包移除，更新插件命令"></a>2.4 包移除，更新插件命令</h3><blockquote>
<p>卸载已安装的模块<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm uninstall &lt;package name&gt;</div></pre></td></tr></table></figure></p>
<p>检查本地有哪些本地包,列出需要更新的包的信息，需要更新的包的名称、当前版本号、最新的版本号等<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm outdated</div></pre></td></tr></table></figure></p>
<p>更新本地安装的某个模块和全局模块<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm update &lt;package name&gt;</div><div class="line">$ npm update  &lt;package name&gt; -g</div></pre></td></tr></table></figure></p>
<p>全部更新<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm update</div><div class="line">$ npm update -g</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="2-5-高级命令"><a href="#2-5-高级命令" class="headerlink" title="2.5 高级命令"></a>2.5 高级命令</h3><p>后续深入学习补充</p>
<h3 id="2-6-其它"><a href="#2-6-其它" class="headerlink" title="2.6 其它"></a>2.6 其它</h3><p>后续深入学习补充</p>
<hr>
<h2 id="npm使用技巧"><a href="#npm使用技巧" class="headerlink" title="npm使用技巧"></a><center>npm使用技巧</center></h2><p>【1】国内访问外网都很慢，甚至不能访问！大家都懂，都很无奈！<br>使用淘宝的npm国内镜像可以极大的提高包下载的速度<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ npm config set strict-ssl <span class="literal">false</span> <span class="comment">//取消ssl验证</span></div><div class="line">$ npm install -g cnpm --registry=https:<span class="comment">//registry.npm.taobao.org</span></div><div class="line"><span class="string">`</span></div></pre></td></tr></table></figure></p>
<p>【2】windows下无法直接删除node_modules，因为node_modules内部嵌套的子目录太多使用rimraf插件可以很好的解决问题<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install rimraf -g</div><div class="line">$ rimraf node_modules</div></pre></td></tr></table></figure></p>
<p>【3】npm默认将全局包和缓存文件放在C盘。如果想更改路劲可以这样设置：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm config set prefix <span class="string">"d:x\node"</span><span class="comment">//修改nodejs全局包的安装路径</span></div><div class="line">$ npm config set cache <span class="string">"D:\nodejs\npm-cache"</span> <span class="comment">//修改缓存路径</span></div></pre></td></tr></table></figure></p>
<p><span style="color:#931F1D;background-color:#fcf8e3;">注意：由于改变了module的默认地址，所以上面的用户变量都要跟着改变一下“用户变量”PATH”修改为你重新设置的路径，要不，使用module的时候会导致输入命令出现“xxx不是内部或外部命令，也不是可运行的程序或批处理文件”这个错误。</span></p>
<p><span style="color:#931F1D;background-color:#f2dede;font-size:18px;">总结，手写代码和排版不易，转载请附上本文链接，谢谢!</span></p>
]]></content>
    </entry>
    
  
  
</search>
