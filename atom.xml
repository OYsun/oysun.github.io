<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OYsun Blog</title>
  <subtitle>影视动画爱好者 前端开发小菜鸟</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-11-23T15:45:35.458Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>oysun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记学校“学子林成长树信息系统”宣传动画制作历程</title>
    <link href="http://yoursite.com/2016/11/23/trees/"/>
    <id>http://yoursite.com/2016/11/23/trees/</id>
    <published>2016-11-22T16:00:00.000Z</published>
    <updated>2016-11-23T15:45:35.458Z</updated>
    
    <content type="html"><![CDATA[<img src="/2016/11/23/trees/title.png" alt="title.png" title="">
<blockquote><p>虽然我已经把影视制作当作爱好，专门学习web前端开发，但是还是会去做MG动画，这次动画的制作过程收获很大。因为我认识了茜姐，丹姐和艾辰，还有志同道合的竞一</p>
</blockquote>
<a id="more"></a>
<hr>
<embed src="http://player.youku.com/player.php/sid/XMTgzMjIwMzIxNg==/v.swf" allowfullscreen="true" quality="high" width="480" height="400" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash">


<p>   这几天一直泡在图书馆学习web开发，打算写完一个vscode的Lodash<br>  sinpptes插件后深入一遍vue，然后用vue和element-UI写一个项目。但是在17号左右艾辰突然在QQ@我问我还做动画不？艾辰是在之前王岩组织一个“啥啥工作室”的时候认识的（不算认识，只是见过面，另外这个工作室由于种种原因最后无疾而终）。我本来想拒绝的，因为我还要好好写代码，但<br>  本人性格是一般都不会拒绝妹子，一般都是被妹子拒绝的。所以我心里不想做，但是口头上却答应了，既然答应了那就做呗，算是温习一下那些MG动画制作的相关知识吧。<br>  来到教学区B2楼，首先认识了竞一，这哥们是学后台.net和java的，也是这个项目的Leader。和他交谈了一会儿感觉相见恨晚啊，自己一直在学前端很多需要后端配合的知识都是让我浅尝辄止，虽然我可以用基础的node搭建一个本地服务器，但是有很多细节还需要更深入的后台的知识，这也是我打算做完用vue和element-UI写的admin页面后好好的学习一下node的原因。<br>    另外，认识了茜姐，丹姐和艾辰。茜姐很平易近人，之前在做书院制动画后和茜姐有段交流，但是没见过面，这次见面，发现茜姐这么漂亮，而且性格很温和，很喜欢夸人，笑起来也很有感染力，我和竞一都认为茜姐是一个很贤惠的女人，找对象就该找她这种的(✿◡‿◡)，让人感到很温馨，不过呢，在这里先祝福茜姐新婚快乐。丹姐呢性格很开朗，做事也很严谨，在<br>  论视频文稿的时候很有想法。艾辰，一个很活泼，很黏人的女孩，她的到来使得我们工作充满了很多乐趣。<br>    这几天由于写插件又得做视频比较累，但是和她们一起做事却很愉快，其实有时候我也很懊恼自己的工作特点，就是一旦认定了做一件事情就会打了鸡血一样的不知疲倦的去做，虽然咋一听这很好啊，但是这对一个人的身体伤害很大。在一开始找我做视频的时候，我也比较敷衍的做了第一个版本，因为我的心思还在写vscode插件上，但是不出所料，第一种视频被pass掉了。然后要求制作另一种形式的视频。而在那天，我<br>  听《老男孩》这首歌突然有点感触，所以那天我对竞一说，你给我一天的时间我会给你满意的视频。也就是说完那句话后我从早上8点起来一直工作到了晚上凌晨3点做好了第二版视频，在这将近20的小时中我重新欣赏了很多国内和国外的MG动画视频，找感觉，找思路，这个视频可以说是我花了比较多额心思，因为我还想找回一下当初那份对影视的激情，当初学习AE的时候那也是这种状态。<br>    今天学校科技节也开幕了，虽然自己对很多事物感情很淡，但是这次看到自己的视频还是有点感触的。</p>
  <img src="/2016/11/23/trees/pc01.png" alt="pc01.png" title="">
  <img src="/2016/11/23/trees/pc02.png" alt="pc02.png" title="">
 <blockquote><p>总之，这次视频制作我最大的收获就是认识了茜姐，丹姐，竞一和艾辰。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2016/11/23/trees/title.png&quot; alt=&quot;title.png&quot; title=&quot;&quot;&gt;
&lt;blockquote&gt;&lt;p&gt;虽然我已经把影视制作当作爱好，专门学习web前端开发，但是还是会去做MG动画，这次动画的制作过程收获很大。因为我认识了茜姐，丹姐和艾辰，还有志同道合的竞一&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="影视技术" scheme="http://yoursite.com/categories/%E5%BD%B1%E8%A7%86%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="影视技术" scheme="http://yoursite.com/tags/%E5%BD%B1%E8%A7%86%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>开发Vscode插件Lodash sinpptes的感想</title>
    <link href="http://yoursite.com/2016/11/22/vscode-lodash/"/>
    <id>http://yoursite.com/2016/11/22/vscode-lodash/</id>
    <published>2016-11-21T16:00:00.000Z</published>
    <updated>2016-11-23T07:38:04.801Z</updated>
    
    <content type="html"><![CDATA[<img src="/2016/11/22/vscode-lodash/title.png" alt="title.png" title="">
<blockquote><p>第一次开发vscode插件，记录一下一些坑，方便以后工作需要继续开发vscode插件做个可以查阅的笔记。</p>
</blockquote>
<a id="more"></a>
<hr>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>Lodash工具库是我开发必不可少的，以前学习jquery体系开发的时候满屏的”$”符号和”_”符号，不过现在学习了vue和react等MVVM框架后就再也不想写jquery了，不过Lodash库还是经常用的。<br>但是Lodash函数一大堆，没有代码提示有点不爽(* ￣︿￣)。虽然说自己对常用的函数很熟悉了，但是还得一个字母一个字幕的敲还是很挫的，如果输入”-“就能提示一大推Lodash函数，按下”Tab”<br>键就可以搞定多好，是吧，所以在vscode插件市场上找关于Lodash的插件，发现有一个，但是用起来不称心，所以干脆就自己写一个吧。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>先看看效果吧</p>
<img src="/2016/11/22/vscode-lodash/demo.gif" alt="demo.gif" title="">
<p>输入”_”就可以出一大堆Lodash函数提示，找到想要的函数按住tab键就可以了，函数的每个参数都可以用tab键来光标切换。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li><p>在vscode插件市场上安装</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=oysun.Lodash" target="_blank" rel="external">vscode插件地址</a></p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ext install Lodash</div></pre></td></tr></table></figure>
<ul>
<li>如果网络不好可以用下载里面的.vsix文件本地安装</li>
</ul>
<p>文件在<a href="https://github.com/OYsun/Vscode-Lodash-Snippents" target="_blank" rel="external">github</a>上</p>
<img src="/2016/11/22/vscode-lodash/install.png" alt="install.png" title="">
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>  用过很多编辑器，像webstorm，sublime 和Atom。webstorm很强大，但是过于笨重，里面内置的很多功能对我来说很鸡肋，还有一点就是巨卡，这点受不了。Atom编辑器无论界面<br>还是功能都很不错，曾经还一度的折腾过，但是她在打开大项目文件的时候还是比较卡，可气的是在卡的时候输个字符都要延迟好久。至于sublime，就是配置有点麻烦，花点时间还是<br>可以折腾出自己满意的样子，不过呢，我还是比较喜欢用vscode。尤其是她的“温馨提示”功能很喜欢，能够提示函数参数的数据类型，可以避免一些错误。<br>  写vscode插件呢首先得要装node，npm这些基础的就不说额。这里说两个写vscode插件必须装的依赖包<br>  第一个是yo generator-code，得安装到全局（类似生产插件项目文件的脚手架）</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g yo generator-code</div></pre></td></tr></table></figure>
<p>  然后输入</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yo code</div></pre></td></tr></table></figure>
<p>  生成项目文件，至于项目文件的一些解释和教程，参考下面几篇文章：</p>
  <blockquote><p><a href="http://www.cnblogs.com/caipeiyu/p/5507252.html" target="_blank" rel="external">http://www.cnblogs.com/caipeiyu/p/5507252.html</a><br><a href="https://code.visualstudio.com/docs/extensionAPI/activation-events" target="_blank" rel="external">https://code.visualstudio.com/docs/extensionAPI/activation-events</a><br><a href="https://code.visualstudio.com/docs/extensionAPI/extension-manifest" target="_blank" rel="external">https://code.visualstudio.com/docs/extensionAPI/extension-manifest</a></p>
</blockquote>
<p>  写完插件呢，怎么使用？有个很low的办法，就是拷贝项目到插件目录，但是这不靠谱吧。所以我们需要一个打包工具叫 vsce 同样的可以用npm来安装，打开cmd执行命令</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g vsce</div></pre></td></tr></table></figure>
<p>  安装完这个工具（⊂((・⊥・))⊃）就是开始入坑了！<br>  要想将自己写的插件发布到vscode市场上，你还得注册微软帐号拿到token才行，拿到token后在自己的插件文件目录下,创建自己的publisher，注意这个publisher要和你插件的publisher一致</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vsce create-publisher (publisher name)</div></pre></td></tr></table></figure>
<p>  然后就可以publish到vscode插件市场上，当然这最重要的就是输入你得token</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vsce publish -p &lt;token&gt;</div></pre></td></tr></table></figure>
<p>  如果你不想发布到vscode插件市场上，只想自己用或者给自己团队用，可以package打包成.visx.文件在本地安装</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vsce package</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2016/11/22/vscode-lodash/title.png&quot; alt=&quot;title.png&quot; title=&quot;&quot;&gt;
&lt;blockquote&gt;&lt;p&gt;第一次开发vscode插件，记录一下一些坑，方便以后工作需要继续开发vscode插件做个可以查阅的笔记。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="web开发" scheme="http://yoursite.com/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="web开发" scheme="http://yoursite.com/tags/web%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>ES6模块系统学习笔记</title>
    <link href="http://yoursite.com/2016/07/28/ES6%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/07/28/ES6模块学习笔记/</id>
    <published>2016-07-27T16:00:00.000Z</published>
    <updated>2016-11-23T01:35:09.621Z</updated>
    
    <content type="html"><![CDATA[<img src="/2016/07/28/ES6模块学习笔记/es6.jpg" alt="es6.jpg" title="">
<blockquote><p>ECMAScript 6 在不久的未来将成为新的标准。对于日新月异的前端技术，我们要拥抱变化，享受ES6带来的美好。</p>
</blockquote>
<a id="more"></a>
<hr>
<p>最近一直在学前端模块化思想。在国内很多企业用sea.js。但是sea.js作者已近发文说sea.js已死。逐渐被淘汰，我觉得应该拥抱变化，所以在模块化学习中没有先学习Require.js,sea.js,CommonJS和UMD。而是先学习ES6的模块系统。在查找资料的过程中，看阮一峰在github开源的一本es6书籍，觉得非常的赞(((o(<em>ﾟ▽ﾟ</em>)o))，所以打算将书中关于es6模块系统那章转载作为自己的学习笔记，方便随时查阅。<br><span style="color:#931F1D;background-color:#f2dede;font-size:18px;"><strong>阮一峰《ECMAScript 6入门》书籍地址：</strong></span><a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">http://es6.ruanyifeng.com/</a><br><span style="color:#931F1D;background-color:#f2dede;font-size:18px;"><strong>阮一峰《ECMAScript6入门》github地址：</strong></span><a href="https://github.com/ruanyf/es6tutorial" target="_blank" rel="external">https://github.com/ruanyf/es6tutorial</a></p>
<hr>
<p>历史上，JavaScript一直没有模块（module）体系，无法将一个大程序拆分成互相依赖的小文件，再用简单的方法拼装起来。其他语言都有这项功能，比如Ruby的<code>require</code>、Python的<code>import</code>，甚至就连CSS都有<code>@import</code>，但是JavaScript任何这方面的支持都没有，这对开发大型的、复杂的项目形成了巨大障碍。</p>
<p>在ES6之前，社区制定了一些模块加载方案，最主要的有CommonJS和AMD两种。前者用于服务器，后者用于浏览器。ES6在语言规格的层面上，实现了模块功能，而且实现得相当简单，完全可以取代现有的CommonJS和AMD规范，成为浏览器和服务器通用的模块解决方案。</p>
<p>ES6模块的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS和AMD模块，都只能在运行时确定这些东西。比如，CommonJS模块就是对象，输入时必须查找对象属性。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// CommonJS模块</span></div><div class="line"><span class="keyword">let</span> &#123; stat, exists, readFile &#125; = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="keyword">let</span> _fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">let</span> stat = _fs.stat, exists = _fs.exists, readfile = _fs.readfile;</div></pre></td></tr></table></figure>
<p>上面代码的实质是整体加载<code>fs</code>模块（即加载<code>fs</code>的所有方法），生成一个对象（<code>_fs</code>），然后再从这个对象上面读取3个方法。这种加载称为“运行时加载”，因为只有运行时才能得到这个对象，导致完全没办法在编译时做“静态优化”。</p>
<p>ES6模块不是对象，而是通过<code>export</code>命令显式指定输出的代码，输入时也采用静态命令的形式。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES6模块</span></div><div class="line"><span class="keyword">import</span> &#123; stat, exists, readFile &#125; <span class="keyword">from</span> <span class="string">'fs'</span>;</div></pre></td></tr></table></figure>
<p>上面代码的实质是从<code>fs</code>模块加载3个方法，其他方法不加载。这种加载称为“编译时加载”，即ES6可以在编译时就完成模块加载，效率要比CommonJS模块的加载方式高。当然，这也导致了没法引用ES6模块本身，因为它不是对象。</p>
<p>由于ES6模块是编译时加载，使得静态分析成为可能。有了它，就能进一步拓宽JavaScript的语法，比如引入宏（macro）和类型检验（type system）这些只能靠静态分析实现的功能。</p>
<p>除了静态加载带来的各种好处，ES6模块还有以下好处。</p>
<ul>
<li>不再需要UMD模块格式了，将来服务器和浏览器都会支持ES6模块格式。目前，通过各种工具库，其实已经做到了这一点。</li>
<li>将来浏览器的新API就能用模块格式提供，不再必要做成全局变量或者<code>navigator</code>对象的属性。</li>
<li>不再需要对象作为命名空间（比如<code>Math</code>对象），未来这些功能可以通过模块提供。</li>
</ul>
<p>浏览器使用ES6模块的语法如下。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">src</span>=<span class="string">"foo.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上面代码在网页中插入一个模块<code>foo.js</code>，由于<code>type</code>属性设为<code>module</code>，所以浏览器知道这是一个ES6模块。</p>
<p>Node的默认模块格式是CommonJS，目前还没决定怎么支持ES6模块。所以，只能通过Babel这样的转码器，在Node里面使用ES6模块。</p>
<h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p>ES6的模块自动采用严格模式，不管你有没有在模块头部加上<code>&quot;use strict&quot;;</code>。</p>
<p>严格模式主要有以下限制。</p>
<ul>
<li>变量必须声明后再使用</li>
<li>函数的参数不能有同名属性，否则报错</li>
<li>不能使用<code>with</code>语句</li>
<li>不能对只读属性赋值，否则报错</li>
<li>不能使用前缀0表示八进制数，否则报错</li>
<li>不能删除不可删除的属性，否则报错</li>
<li>不能删除变量<code>delete prop</code>，会报错，只能删除属性<code>delete global[prop]</code></li>
<li><code>eval</code>不会在它的外层作用域引入变量</li>
<li><code>eval</code>和<code>arguments</code>不能被重新赋值</li>
<li><code>arguments</code>不会自动反映函数参数的变化</li>
<li>不能使用<code>arguments.callee</code></li>
<li>不能使用<code>arguments.caller</code></li>
<li>禁止<code>this</code>指向全局对象</li>
<li>不能使用<code>fn.caller</code>和<code>fn.arguments</code>获取函数调用的堆栈</li>
<li>增加了保留字（比如<code>protected</code>、<code>static</code>和<code>interface</code>）</li>
</ul>
<p>上面这些限制，模块都必须遵守。由于严格模式是ES5引入的，不属于ES6，所以请参阅相关ES5书籍，本书不再详细介绍了。</p>
<h2 id="export命令"><a href="#export命令" class="headerlink" title="export命令"></a>export命令</h2><p>模块功能主要由两个命令构成：<code>export</code>和<code>import</code>。<code>export</code>命令用于规定模块的对外接口，<code>import</code>命令用于输入其他模块提供的功能。</p>
<p>一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用<code>export</code>关键字输出该变量。下面是一个JS文件，里面使用<code>export</code>命令输出变量。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// profile.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">var</span> firstName = <span class="string">'Michael'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">var</span> lastName = <span class="string">'Jackson'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">var</span> year = <span class="number">1958</span>;</div></pre></td></tr></table></figure>
<p>上面代码是<code>profile.js</code>文件，保存了用户信息。ES6将其视为一个模块，里面用<code>export</code>命令对外部输出了三个变量。</p>
<p><code>export</code>的写法，除了像上面这样，还有另外一种。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// profile.js</span></div><div class="line"><span class="keyword">var</span> firstName = <span class="string">'Michael'</span>;</div><div class="line"><span class="keyword">var</span> lastName = <span class="string">'Jackson'</span>;</div><div class="line"><span class="keyword">var</span> year = <span class="number">1958</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> &#123;firstName, lastName, year&#125;;</div></pre></td></tr></table></figure>
<p>上面代码在<code>export</code>命令后面，使用大括号指定所要输出的一组变量。它与前一种写法（直接放置在<code>var</code>语句前）是等价的，但是应该优先考虑使用这种写法。因为这样就可以在脚本尾部，一眼看清楚输出了哪些变量。</p>
<p>export命令除了输出变量，还可以输出函数或类（class）。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> x * y;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上面代码对外输出一个函数<code>multiply</code>。</p>
<p>通常情况下，<code>export</code>输出的变量就是本来的名字，但是可以使用<code>as</code>关键字重命名。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">v1</span>(<span class="params"></span>) </span>&#123; ... &#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">v2</span>(<span class="params"></span>) </span>&#123; ... &#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> &#123;</div><div class="line">  v1 <span class="keyword">as</span> streamV1,</div><div class="line">  v2 <span class="keyword">as</span> streamV2,</div><div class="line">  v2 <span class="keyword">as</span> streamLatestVersion</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上面代码使用<code>as</code>关键字，重命名了函数<code>v1</code>和<code>v2</code>的对外接口。重命名后，<code>v2</code>可以用不同的名字输出两次。</p>
<p>需要特别注意的是，<code>export</code>命令规定的是对外的接口，必须与模块内部的变量建立一一对应关系。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 报错</span></div><div class="line"><span class="keyword">export</span> <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="comment">// 报错</span></div><div class="line"><span class="keyword">var</span> m = <span class="number">1</span>;</div><div class="line"><span class="keyword">export</span> m;</div></pre></td></tr></table></figure>
<p>上面两种写法都会报错，因为没有提供对外的接口。第一种写法直接输出1，第二种写法通过变量<code>m</code>，还是直接输出1。<code>1</code>只是一个值，不是接口。正确的写法是下面这样。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 写法一</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">var</span> m = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="comment">// 写法二</span></div><div class="line"><span class="keyword">var</span> m = <span class="number">1</span>;</div><div class="line"><span class="keyword">export</span> &#123;m&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 写法三</span></div><div class="line"><span class="keyword">var</span> n = <span class="number">1</span>;</div><div class="line"><span class="keyword">export</span> &#123;n <span class="keyword">as</span> m&#125;;</div></pre></td></tr></table></figure>
<p>上面三种写法都是正确的，规定了对外的接口<code>m</code>。其他脚本可以通过这个接口，取到值<code>1</code>。它们的实质是，在接口名与模块内部变量之间，建立了一一对应的关系。</p>
<p>同样的，<code>function</code>和<code>class</code>的输出，也必须遵守这样的写法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 报错</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="keyword">export</span> f;</div><div class="line"></div><div class="line"><span class="comment">// 正确</span></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 正确</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="keyword">export</span> &#123;f&#125;;</div></pre></td></tr></table></figure>
<p>另外，<code>export</code>语句输出的接口，与其对应的值是动态绑定关系，即通过该接口，可以取到模块内部实时的值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">var</span> foo = <span class="string">'bar'</span>;</div><div class="line">setTimeout(() =&gt; foo = <span class="string">'baz'</span>, <span class="number">500</span>);</div></pre></td></tr></table></figure>
<p>上面代码输出变量<code>foo</code>，值为<code>bar</code>，500毫秒之后变成<code>baz</code>。</p>
<p>这一点与CommonJS规范完全不同。CommonJS模块输出的是值的缓存，不存在动态更新，详见下文《ES6模块加载的实质》一节。</p>
<p>最后，<code>export</code>命令可以出现在模块的任何位置，只要处于模块顶层就可以。如果处于块级作用域内，就会报错，下一节的<code>import</code>命令也是如此。这是因为处于条件代码块之中，就没法做静态优化了，违背了ES6模块的设计初衷。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'bar'</span> <span class="comment">// SyntaxError</span></div><div class="line">&#125;</div><div class="line">foo()</div></pre></td></tr></table></figure>
<p>上面代码中，<code>export</code>语句放在函数之中，结果报错。</p>
<h2 id="import命令"><a href="#import命令" class="headerlink" title="import命令"></a>import命令</h2><p>使用<code>export</code>命令定义了模块的对外接口以后，其他JS文件就可以通过<code>import</code>命令加载这个模块（文件）。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// main.js</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123;firstName, lastName, year&#125; <span class="keyword">from</span> <span class="string">'./profile'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params">element</span>) </span>&#123;</div><div class="line">  element.textContent = firstName + <span class="string">' '</span> + lastName;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码的<code>import</code>命令，就用于加载<code>profile.js</code>文件，并从中输入变量。<code>import</code>命令接受一个对象（用大括号表示），里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（<code>profile.js</code>）对外接口的名称相同。</p>
<p>如果想为输入的变量重新取一个名字，import命令要使用<code>as</code>关键字，将输入的变量重命名。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; lastName <span class="keyword">as</span> surname &#125; <span class="keyword">from</span> <span class="string">'./profile'</span>;</div></pre></td></tr></table></figure>
<p>注意，<code>import</code>命令具有提升效果，会提升到整个模块的头部，首先执行。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">foo();</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; foo &#125; <span class="keyword">from</span> <span class="string">'my_module'</span>;</div></pre></td></tr></table></figure>
<p>上面的代码不会报错，因为<code>import</code>的执行早于<code>foo</code>的调用。</p>
<p>如果在一个模块之中，先输入后输出同一个模块，<code>import</code>语句可以与<code>export</code>语句写在一起。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> &#123; es6 <span class="keyword">as</span> <span class="keyword">default</span> &#125; <span class="keyword">from</span> <span class="string">'./someModule'</span>;</div><div class="line"></div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="keyword">import</span> &#123; es6 &#125; <span class="keyword">from</span> <span class="string">'./someModule'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> es6;</div></pre></td></tr></table></figure>
<p>上面代码中，<code>export</code>和<code>import</code>语句可以结合在一起，写成一行。但是从可读性考虑，不建议采用这种写法，而应该采用标准写法。</p>
<p>另外，ES7有一个<a href="https://github.com/leebyron/ecmascript-more-export-from" target="_blank" rel="external">提案</a>，简化先输入后输出的写法，拿掉输出时的大括号。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 提案的写法</span></div><div class="line"><span class="keyword">export</span> v <span class="keyword">from</span> <span class="string">'mod'</span>;</div><div class="line"></div><div class="line"><span class="comment">// 现行的写法</span></div><div class="line"><span class="keyword">export</span> &#123;v&#125; <span class="keyword">from</span> <span class="string">'mod'</span>;</div></pre></td></tr></table></figure>
<p><code>import</code>语句会执行所加载的模块，因此可以有下面的写法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">'lodash'</span>;</div></pre></td></tr></table></figure>
<p>上面代码仅仅执行<code>lodash</code>模块，但是不输入任何值。</p>
<h2 id="模块的整体加载"><a href="#模块的整体加载" class="headerlink" title="模块的整体加载"></a>模块的整体加载</h2><p>除了指定加载某个输出值，还可以使用整体加载，即用星号（<code>*</code>）指定一个对象，所有输出值都加载在这个对象上面。</p>
<p>下面是一个<code>circle.js</code>文件，它输出两个方法<code>area</code>和<code>circumference</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// circle.js</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">area</span>(<span class="params">radius</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.PI * radius * radius;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">circumference</span>(<span class="params">radius</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="number">2</span> * <span class="built_in">Math</span>.PI * radius;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在，加载这个模块。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// main.js</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; area, circumference &#125; <span class="keyword">from</span> <span class="string">'./circle'</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'圆面积：'</span> + area(<span class="number">4</span>));</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'圆周长：'</span> + circumference(<span class="number">14</span>));</div></pre></td></tr></table></figure>
<p>上面写法是逐一指定要加载的方法，整体加载的写法如下。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> circle <span class="keyword">from</span> <span class="string">'./circle'</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'圆面积：'</span> + circle.area(<span class="number">4</span>));</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'圆周长：'</span> + circle.circumference(<span class="number">14</span>));</div></pre></td></tr></table></figure>
<h2 id="export-default命令"><a href="#export-default命令" class="headerlink" title="export default命令"></a>export default命令</h2><p>从前面的例子可以看出，使用<code>import</code>命令的时候，用户需要知道所要加载的变量名或函数名，否则无法加载。但是，用户肯定希望快速上手，未必愿意阅读文档，去了解模块有哪些属性和方法。</p>
<p>为了给用户提供方便，让他们不用阅读文档就能加载模块，就要用到<code>export default</code>命令，为模块指定默认输出。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// export-default.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'foo'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码是一个模块文件<code>export-default.js</code>，它的默认输出是一个函数。</p>
<p>其他模块加载该模块时，<code>import</code>命令可以为该匿名函数指定任意名字。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// import-default.js</span></div><div class="line"><span class="keyword">import</span> customName <span class="keyword">from</span> <span class="string">'./export-default'</span>;</div><div class="line">customName(); <span class="comment">// 'foo'</span></div></pre></td></tr></table></figure>
<p>上面代码的<code>import</code>命令，可以用任意名称指向<code>export-default.js</code>输出的方法，这时就不需要知道原模块输出的函数名。需要注意的是，这时<code>import</code>命令后面，不使用大括号。</p>
<p><code>export default</code>命令用在非匿名函数前，也是可以的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// export-default.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'foo'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 或者写成</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'foo'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> foo;</div></pre></td></tr></table></figure>
<p>上面代码中，<code>foo</code>函数的函数名<code>foo</code>，在模块外部是无效的。加载的时候，视同匿名函数加载。</p>
<p>下面比较一下默认输出和正常输出。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 输出</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">crc32</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 输入</span></div><div class="line"><span class="keyword">import</span> crc32 <span class="keyword">from</span> <span class="string">'crc32'</span>;</div><div class="line"></div><div class="line"><span class="comment">// 输出</span></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">crc32</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;;</div><div class="line"><span class="comment">// 输入</span></div><div class="line"><span class="keyword">import</span> &#123;crc32&#125; <span class="keyword">from</span> <span class="string">'crc32'</span>;</div></pre></td></tr></table></figure>
<p>上面代码的两组写法，第一组是使用<code>export default</code>时，对应的<code>import</code>语句不需要使用大括号；第二组是不使用<code>export default</code>时，对应的<code>import</code>语句需要使用大括号。</p>
<p><code>export default</code>命令用于指定模块的默认输出。显然，一个模块只能有一个默认输出，因此<code>export deault</code>命令只能使用一次。所以，<code>import</code>命令后面才不用加大括号，因为只可能对应一个方法。</p>
<p>本质上，<code>export default</code>就是输出一个叫做<code>default</code>的变量或方法，然后系统允许你为它取任意名字。所以，下面的写法是有效的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// modules.js</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> x * y;</div><div class="line">&#125;</div><div class="line"><span class="keyword">export</span> &#123;add <span class="keyword">as</span> <span class="keyword">default</span>&#125;;</div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="comment">// export default add;</span></div><div class="line"></div><div class="line"><span class="comment">// app.js</span></div><div class="line"><span class="keyword">import</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> xxx &#125; <span class="keyword">from</span> <span class="string">'modules'</span>;</div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="comment">// import xxx from 'modules';</span></div></pre></td></tr></table></figure>
<p>正是因为<code>export default</code>命令其实只是输出一个叫做<code>default</code>的变量，所以它后面不能跟变量声明语句。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 正确</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="comment">// 正确</span></div><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> a;</div><div class="line"></div><div class="line"><span class="comment">// 错误</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">var</span> a = <span class="number">1</span>;</div></pre></td></tr></table></figure>
<p>上面代码中，<code>export default a</code>的含义是将变量<code>a</code>的值赋给变量<code>default</code>。所以，最后一种写法会报错。</p>
<p>有了<code>export default</code>命令，输入模块时就非常直观了，以输入jQuery模块为例。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'jquery'</span>;</div></pre></td></tr></table></figure>
<p>如果想在一条import语句中，同时输入默认方法和其他变量，可以写成下面这样。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> customName, &#123; otherMethod &#125; <span class="keyword">from</span> <span class="string">'./export-default'</span>;</div></pre></td></tr></table></figure>
<p>如果要输出默认的值，只需将值跟在<code>export default</code>之后即可。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="number">42</span>;</div></pre></td></tr></table></figure>
<p><code>export default</code>也可以用来输出类。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MyClass.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> </span>&#123; ... &#125;</div><div class="line"></div><div class="line"><span class="comment">// main.js</span></div><div class="line"><span class="keyword">import</span> MyClass <span class="keyword">from</span> <span class="string">'MyClass'</span>;</div><div class="line"><span class="keyword">let</span> o = <span class="keyword">new</span> MyClass();</div></pre></td></tr></table></figure>
<h2 id="模块的继承"><a href="#模块的继承" class="headerlink" title="模块的继承"></a>模块的继承</h2><p>模块之间也可以继承。</p>
<p>假设有一个<code>circleplus</code>模块，继承了<code>circle</code>模块。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// circleplus.js</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'circle'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">var</span> e = <span class="number">2.71828182846</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.exp(x);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码中的<code>export *</code>，表示再输出<code>circle</code>模块的所有属性和方法。注意，<code>export *</code>命令会忽略<code>circle</code>模块的<code>default</code>方法。然后，上面代码又输出了自定义的<code>e</code>变量和默认方法。</p>
<p>这时，也可以将<code>circle</code>的属性或方法，改名后再输出。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// circleplus.js</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> &#123; area <span class="keyword">as</span> circleArea &#125; <span class="keyword">from</span> <span class="string">'circle'</span>;</div></pre></td></tr></table></figure>
<p>上面代码表示，只输出<code>circle</code>模块的<code>area</code>方法，且将其改名为<code>circleArea</code>。</p>
<p>加载上面模块的写法如下。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// main.js</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> math <span class="keyword">from</span> <span class="string">'circleplus'</span>;</div><div class="line"><span class="keyword">import</span> exp <span class="keyword">from</span> <span class="string">'circleplus'</span>;</div><div class="line"><span class="built_in">console</span>.log(exp(math.e));</div></pre></td></tr></table></figure>
<p>上面代码中的<code>import exp</code>表示，将<code>circleplus</code>模块的默认方法加载为<code>exp</code>方法。</p>
<h2 id="ES6模块加载的实质"><a href="#ES6模块加载的实质" class="headerlink" title="ES6模块加载的实质"></a>ES6模块加载的实质</h2><p>ES6模块加载的机制，与CommonJS模块完全不同。CommonJS模块输出的是一个值的拷贝，而ES6模块输出的是值的引用。</p>
<p>CommonJS模块输出的是被输出值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。请看下面这个模块文件<code>lib.js</code>的例子。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// lib.js</span></div><div class="line"><span class="keyword">var</span> counter = <span class="number">3</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">incCounter</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  counter++;</div><div class="line">&#125;</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  counter: counter,</div><div class="line">  incCounter: incCounter,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上面代码输出内部变量<code>counter</code>和改写这个变量的内部方法<code>incCounter</code>。然后，在<code>main.js</code>里面加载这个模块。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// main.js</span></div><div class="line"><span class="keyword">var</span> mod = <span class="built_in">require</span>(<span class="string">'./lib'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(mod.counter);  <span class="comment">// 3</span></div><div class="line">mod.incCounter();</div><div class="line"><span class="built_in">console</span>.log(mod.counter); <span class="comment">// 3</span></div></pre></td></tr></table></figure>
<p>上面代码说明，<code>lib.js</code>模块加载以后，它的内部变化就影响不到输出的<code>mod.counter</code>了。这是因为<code>mod.counter</code>是一个原始类型的值，会被缓存。除非写成一个函数，才能得到内部变动后的值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// lib.js</span></div><div class="line"><span class="keyword">var</span> counter = <span class="number">3</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">incCounter</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  counter++;</div><div class="line">&#125;</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  get counter() &#123;</div><div class="line">    <span class="keyword">return</span> counter</div><div class="line">  &#125;,</div><div class="line">  incCounter: incCounter,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上面代码中，输出的<code>counter</code>属性实际上是一个取值器函数。现在再执行<code>main.js</code>，就可以正确读取内部变量<code>counter</code>的变动了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ node main.js</div><div class="line">3</div><div class="line">4</div></pre></td></tr></table></figure>
<p>ES6模块的运行机制与CommonJS不一样，它遇到模块加载命令<code>import</code>时，不会去执行模块，而是只生成一个动态的只读引用。等到真的需要用到时，再到模块里面去取值，换句话说，ES6的输入有点像Unix系统的“符号连接”，原始值变了，<code>import</code>输入的值也会跟着变。因此，ES6模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。</p>
<p>还是举上面的例子。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// lib.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">let</span> counter = <span class="number">3</span>;</div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">incCounter</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  counter++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// main.js</span></div><div class="line"><span class="keyword">import</span> &#123; counter, incCounter &#125; <span class="keyword">from</span> <span class="string">'./lib'</span>;</div><div class="line"><span class="built_in">console</span>.log(counter); <span class="comment">// 3</span></div><div class="line">incCounter();</div><div class="line"><span class="built_in">console</span>.log(counter); <span class="comment">// 4</span></div></pre></td></tr></table></figure>
<p>上面代码说明，ES6模块输入的变量<code>counter</code>是活的，完全反应其所在模块<code>lib.js</code>内部的变化。</p>
<p>再举一个出现在<code>export</code>一节中的例子。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// m1.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">var</span> foo = <span class="string">'bar'</span>;</div><div class="line">setTimeout(() =&gt; foo = <span class="string">'baz'</span>, <span class="number">500</span>);</div><div class="line"></div><div class="line"><span class="comment">// m2.js</span></div><div class="line"><span class="keyword">import</span> &#123;foo&#125; <span class="keyword">from</span> <span class="string">'./m1.js'</span>;</div><div class="line"><span class="built_in">console</span>.log(foo);</div><div class="line">setTimeout(() =&gt; <span class="built_in">console</span>.log(foo), <span class="number">500</span>);</div></pre></td></tr></table></figure>
<p>上面代码中，<code>m1.js</code>的变量<code>foo</code>，在刚加载时等于<code>bar</code>，过了500毫秒，又变为等于<code>baz</code>。</p>
<p>让我们看看，<code>m2.js</code>能否正确读取这个变化。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ babel-node m2.js</div><div class="line"></div><div class="line">bar</div><div class="line">baz</div></pre></td></tr></table></figure>
<p>上面代码表明，ES6模块不会缓存运行结果，而是动态地去被加载的模块取值，并且变量总是绑定其所在的模块。</p>
<p>由于ES6输入的模块变量，只是一个“符号连接”，所以这个变量是只读的，对它进行重新赋值会报错。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// lib.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">let</span> obj = &#123;&#125;;</div><div class="line"></div><div class="line"><span class="comment">// main.js</span></div><div class="line"><span class="keyword">import</span> &#123; obj &#125; <span class="keyword">from</span> <span class="string">'./lib'</span>;</div><div class="line"></div><div class="line">obj.prop = <span class="number">123</span>; <span class="comment">// OK</span></div><div class="line">obj = &#123;&#125;; <span class="comment">// TypeError</span></div></pre></td></tr></table></figure>
<p>上面代码中，<code>main.js</code>从<code>lib.js</code>输入变量<code>obj</code>，可以对<code>obj</code>添加属性，但是重新赋值就会报错。因为变量<code>obj</code>指向的地址是只读的，不能重新赋值，这就好比<code>main.js</code>创造了一个名为<code>obj</code>的const变量。</p>
<p>最后，<code>export</code>通过接口，输出的是同一个值。不同的脚本加载这个接口，得到的都是同样的实例。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// mod.js</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">C</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.sum = <span class="number">0</span>;</div><div class="line">  <span class="keyword">this</span>.add = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.sum += <span class="number">1</span>;</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">this</span>.show = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.sum);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">let</span> c = <span class="keyword">new</span> C();</div></pre></td></tr></table></figure>
<p>上面的脚本<code>mod.js</code>，输出的是一个<code>C</code>的实例。不同的脚本加载这个模块，得到的都是同一个实例。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// x.js</span></div><div class="line"><span class="keyword">import</span> &#123;c&#125; <span class="keyword">from</span> <span class="string">'./mod'</span>;</div><div class="line">c.add();</div><div class="line"></div><div class="line"><span class="comment">// y.js</span></div><div class="line"><span class="keyword">import</span> &#123;c&#125; <span class="keyword">from</span> <span class="string">'./mod'</span>;</div><div class="line">c.show();</div><div class="line"></div><div class="line"><span class="comment">// main.js</span></div><div class="line"><span class="keyword">import</span> <span class="string">'./x'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'./y'</span>;</div></pre></td></tr></table></figure>
<p>现在执行<code>main.js</code>，输出的是1。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ babel-node main.js</div><div class="line">1</div></pre></td></tr></table></figure>
<p>这就证明了<code>x.js</code>和<code>y.js</code>加载的都是<code>C</code>的同一个实例。</p>
<h2 id="循环加载"><a href="#循环加载" class="headerlink" title="循环加载"></a>循环加载</h2><p>“循环加载”（circular dependency）指的是，<code>a</code>脚本的执行依赖<code>b</code>脚本，而<code>b</code>脚本的执行又依赖<code>a</code>脚本。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// a.js</span></div><div class="line"><span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">'b'</span>);</div><div class="line"></div><div class="line"><span class="comment">// b.js</span></div><div class="line"><span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'a'</span>);</div></pre></td></tr></table></figure>
<p>通常，“循环加载”表示存在强耦合，如果处理不好，还可能导致递归加载，使得程序无法执行，因此应该避免出现。</p>
<p>但是实际上，这是很难避免的，尤其是依赖关系复杂的大项目，很容易出现<code>a</code>依赖<code>b</code>，<code>b</code>依赖<code>c</code>，<code>c</code>又依赖<code>a</code>这样的情况。这意味着，模块加载机制必须考虑“循环加载”的情况。</p>
<p>对于JavaScript语言来说，目前最常见的两种模块格式CommonJS和ES6，处理“循环加载”的方法是不一样的，返回的结果也不一样。</p>
<h3 id="CommonJS模块的加载原理"><a href="#CommonJS模块的加载原理" class="headerlink" title="CommonJS模块的加载原理"></a>CommonJS模块的加载原理</h3><p>介绍ES6如何处理”循环加载”之前，先介绍目前最流行的CommonJS模块格式的加载原理。</p>
<p>CommonJS的一个模块，就是一个脚本文件。<code>require</code>命令第一次加载该脚本，就会执行整个脚本，然后在内存生成一个对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  id: <span class="string">'...'</span>,</div><div class="line">  exports: &#123; ... &#125;,</div><div class="line">  loaded: <span class="literal">true</span>,</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码就是Node内部加载模块后生成的一个对象。该对象的<code>id</code>属性是模块名，<code>exports</code>属性是模块输出的各个接口，<code>loaded</code>属性是一个布尔值，表示该模块的脚本是否执行完毕。其他还有很多属性，这里都省略了。</p>
<p>以后需要用到这个模块的时候，就会到<code>exports</code>属性上面取值。即使再次执行<code>require</code>命令，也不会再次执行该模块，而是到缓存之中取值。也就是说，CommonJS模块无论加载多少次，都只会在第一次加载时运行一次，以后再加载，就返回第一次运行的结果，除非手动清除系统缓存。</p>
<h3 id="CommonJS模块的循环加载"><a href="#CommonJS模块的循环加载" class="headerlink" title="CommonJS模块的循环加载"></a>CommonJS模块的循环加载</h3><p>CommonJS模块的重要特性是加载时执行，即脚本代码在<code>require</code>的时候，就会全部执行。一旦出现某个模块被”循环加载”，就只输出已经执行的部分，还未执行的部分不会输出。</p>
<p>让我们来看，Node<a href="https://nodejs.org/api/modules.html#modules_cycles" target="_blank" rel="external">官方文档</a>里面的例子。脚本文件<code>a.js</code>代码如下。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">exports.done = <span class="literal">false</span>;</div><div class="line"><span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">'./b.js'</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'在 a.js 之中，b.done = %j'</span>, b.done);</div><div class="line">exports.done = <span class="literal">true</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'a.js 执行完毕'</span>);</div></pre></td></tr></table></figure>
<p>上面代码之中，<code>a.js</code>脚本先输出一个<code>done</code>变量，然后加载另一个脚本文件<code>b.js</code>。注意，此时<code>a.js</code>代码就停在这里，等待<code>b.js</code>执行完毕，再往下执行。</p>
<p>再看<code>b.js</code>的代码。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">exports.done = <span class="literal">false</span>;</div><div class="line"><span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a.js'</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'在 b.js 之中，a.done = %j'</span>, a.done);</div><div class="line">exports.done = <span class="literal">true</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'b.js 执行完毕'</span>);</div></pre></td></tr></table></figure>
<p>上面代码之中，<code>b.js</code>执行到第二行，就会去加载<code>a.js</code>，这时，就发生了“循环加载”。系统会去<code>a.js</code>模块对应对象的<code>exports</code>属性取值，可是因为<code>a.js</code>还没有执行完，从<code>exports</code>属性只能取回已经执行的部分，而不是最后的值。</p>
<p><code>a.js</code>已经执行的部分，只有一行。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">exports.done = <span class="literal">false</span>;</div></pre></td></tr></table></figure>
<p>因此，对于<code>b.js</code>来说，它从<code>a.js</code>只输入一个变量<code>done</code>，值为<code>false</code>。</p>
<p>然后，<code>b.js</code>接着往下执行，等到全部执行完毕，再把执行权交还给<code>a.js</code>。于是，<code>a.js</code>接着往下执行，直到执行完毕。我们写一个脚本<code>main.js</code>，验证这个过程。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a.js'</span>);</div><div class="line"><span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">'./b.js'</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'在 main.js 之中, a.done=%j, b.done=%j'</span>, a.done, b.done);</div></pre></td></tr></table></figure>
<p>执行<code>main.js</code>，运行结果如下。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ node main.js</div><div class="line"></div><div class="line">在 b.js 之中，a.done = <span class="literal">false</span></div><div class="line">b.js 执行完毕</div><div class="line">在 a.js 之中，b.done = <span class="literal">true</span></div><div class="line">a.js 执行完毕</div><div class="line">在 main.js 之中, a.done=<span class="literal">true</span>, b.done=<span class="literal">true</span></div></pre></td></tr></table></figure>
<p>上面的代码证明了两件事。一是，在<code>b.js</code>之中，<code>a.js</code>没有执行完毕，只执行了第一行。二是，<code>main.js</code>执行到第二行时，不会再次执行<code>b.js</code>，而是输出缓存的<code>b.js</code>的执行结果，即它的第四行。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">exports.done = <span class="literal">true</span>;</div></pre></td></tr></table></figure>
<p>总之，CommonJS输入的是被输出值的拷贝，不是引用。</p>
<p>另外，由于CommonJS模块遇到循环加载时，返回的是当前已经执行的部分的值，而不是代码全部执行后的值，两者可能会有差异。所以，输入变量的时候，必须非常小心。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'a'</span>); <span class="comment">// 安全的写法</span></div><div class="line"><span class="keyword">var</span> foo = <span class="built_in">require</span>(<span class="string">'a'</span>).foo; <span class="comment">// 危险的写法</span></div><div class="line"></div><div class="line">exports.good = <span class="function"><span class="keyword">function</span> (<span class="params">arg</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> a.foo(<span class="string">'good'</span>, arg); <span class="comment">// 使用的是 a.foo 的最新值</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">exports.bad = <span class="function"><span class="keyword">function</span> (<span class="params">arg</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> foo(<span class="string">'bad'</span>, arg); <span class="comment">// 使用的是一个部分加载时的值</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上面代码中，如果发生循环加载，<code>require(&#39;a&#39;).foo</code>的值很可能后面会被改写，改用<code>require(&#39;a&#39;)</code>会更保险一点。</p>
<h3 id="ES6模块的循环加载"><a href="#ES6模块的循环加载" class="headerlink" title="ES6模块的循环加载"></a>ES6模块的循环加载</h3><p>ES6处理“循环加载”与CommonJS有本质的不同。ES6模块是动态引用，如果使用<code>import</code>从一个模块加载变量（即<code>import foo from &#39;foo&#39;</code>），那些变量不会被缓存，而是成为一个指向被加载模块的引用，需要开发者自己保证，真正取值的时候能够取到值。</p>
<p>请看下面这个例子。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// a.js如下</span></div><div class="line"><span class="keyword">import</span> &#123;bar&#125; <span class="keyword">from</span> <span class="string">'./b.js'</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'a.js'</span>);</div><div class="line"><span class="built_in">console</span>.log(bar);</div><div class="line"><span class="keyword">export</span> <span class="keyword">let</span> foo = <span class="string">'foo'</span>;</div><div class="line"></div><div class="line"><span class="comment">// b.js</span></div><div class="line"><span class="keyword">import</span> &#123;foo&#125; <span class="keyword">from</span> <span class="string">'./a.js'</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'b.js'</span>);</div><div class="line"><span class="built_in">console</span>.log(foo);</div><div class="line"><span class="keyword">export</span> <span class="keyword">let</span> bar = <span class="string">'bar'</span>;</div></pre></td></tr></table></figure>
<p>上面代码中，<code>a.js</code>加载<code>b.js</code>，<code>b.js</code>又加载<code>a.js</code>，构成循环加载。执行<code>a.js</code>，结果如下。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ babel-node a.js</div><div class="line">b.js</div><div class="line">undefined</div><div class="line">a.js</div><div class="line">bar</div></pre></td></tr></table></figure>
<p>上面代码中，由于<code>a.js</code>的第一行是加载<code>b.js</code>，所以先执行的是<code>b.js</code>。而<code>b.js</code>的第一行又是加载<code>a.js</code>，这时由于<code>a.js</code>已经开始执行了，所以不会重复执行，而是继续往下执行<code>b.js</code>，所以第一行输出的是<code>b.js</code>。</p>
<p>接着，<code>b.js</code>要打印变量<code>foo</code>，这时<code>a.js</code>还没执行完，取不到<code>foo</code>的值，导致打印出来是<code>undefined</code>。<code>b.js</code>执行完，开始执行<code>a.js</code>，这时就一切正常了。</p>
<p>再看一个稍微复杂的例子（摘自 Dr. Axel Rauschmayer 的<a href="http://exploringjs.com/es6/ch_modules.html" target="_blank" rel="external">《Exploring ES6》</a>）。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// a.js</span></div><div class="line"><span class="keyword">import</span> &#123;bar&#125; <span class="keyword">from</span> <span class="string">'./b.js'</span>;</div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'foo'</span>);</div><div class="line">  bar();</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'执行完毕'</span>);</div><div class="line">&#125;</div><div class="line">foo();</div><div class="line"></div><div class="line"><span class="comment">// b.js</span></div><div class="line"><span class="keyword">import</span> &#123;foo&#125; <span class="keyword">from</span> <span class="string">'./a.js'</span>;</div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'bar'</span>);</div><div class="line">  <span class="keyword">if</span> (<span class="built_in">Math</span>.random() &gt; <span class="number">0.5</span>) &#123;</div><div class="line">    foo();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>按照CommonJS规范，上面的代码是没法执行的。<code>a</code>先加载<code>b</code>，然后<code>b</code>又加载<code>a</code>，这时<code>a</code>还没有任何执行结果，所以输出结果为<code>null</code>，即对于<code>b.js</code>来说，变量<code>foo</code>的值等于<code>null</code>，后面的<code>foo()</code>就会报错。</p>
<p>但是，ES6可以执行上面的代码。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ babel-node a.js</div><div class="line">foo</div><div class="line">bar</div><div class="line">执行完毕</div><div class="line"></div><div class="line">// 执行结果也有可能是</div><div class="line">foo</div><div class="line">bar</div><div class="line">foo</div><div class="line">bar</div><div class="line">执行完毕</div><div class="line">执行完毕</div></pre></td></tr></table></figure>
<p>上面代码中，<code>a.js</code>之所以能够执行，原因就在于ES6加载的变量，都是动态引用其所在的模块。只要引用存在，代码就能执行。</p>
<p>下面，我们详细分析这段代码的运行过程。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// a.js</span></div><div class="line"></div><div class="line"><span class="comment">// 这一行建立一个引用，</span></div><div class="line"><span class="comment">// 从`b.js`引用`bar`</span></div><div class="line"><span class="keyword">import</span> &#123;bar&#125; <span class="keyword">from</span> <span class="string">'./b.js'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 执行时第一行输出 foo</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'foo'</span>);</div><div class="line">  <span class="comment">// 到 b.js 执行 bar</span></div><div class="line">  bar();</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'执行完毕'</span>);</div><div class="line">&#125;</div><div class="line">foo();</div><div class="line"></div><div class="line"><span class="comment">// b.js</span></div><div class="line"></div><div class="line"><span class="comment">// 建立`a.js`的`foo`引用</span></div><div class="line"><span class="keyword">import</span> &#123;foo&#125; <span class="keyword">from</span> <span class="string">'./a.js'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 执行时，第二行输出 bar</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'bar'</span>);</div><div class="line">  <span class="comment">// 递归执行 foo，一旦随机数</span></div><div class="line">  <span class="comment">// 小于等于0.5，就停止执行</span></div><div class="line">  <span class="keyword">if</span> (<span class="built_in">Math</span>.random() &gt; <span class="number">0.5</span>) &#123;</div><div class="line">    foo();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们再来看ES6模块加载器<a href="https://github.com/ModuleLoader/es6-module-loader/blob/master/docs/circular-references-bindings.md" target="_blank" rel="external">SystemJS</a>给出的一个例子。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// even.js</span></div><div class="line"><span class="keyword">import</span> &#123; odd &#125; <span class="keyword">from</span> <span class="string">'./odd'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">var</span> counter = <span class="number">0</span>;</div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">even</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">  counter++;</div><div class="line">  <span class="keyword">return</span> n == <span class="number">0</span> || odd(n - <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// odd.js</span></div><div class="line"><span class="keyword">import</span> &#123; even &#125; <span class="keyword">from</span> <span class="string">'./even'</span>;</div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">odd</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> n != <span class="number">0</span> &amp;&amp; even(n - <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码中，<code>even.js</code>里面的函数<code>even</code>有一个参数<code>n</code>，只要不等于0，就会减去1，传入加载的<code>odd()</code>。<code>odd.js</code>也会做类似操作。</p>
<p>运行上面这段代码，结果如下。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ babel-node</div><div class="line">&gt; <span class="keyword">import</span> * <span class="keyword">as</span> m <span class="keyword">from</span> <span class="string">'./even.js'</span>;</div><div class="line">&gt; m.even(<span class="number">10</span>);</div><div class="line"><span class="literal">true</span></div><div class="line">&gt; m.counter</div><div class="line"><span class="number">6</span></div><div class="line">&gt; m.even(<span class="number">20</span>)</div><div class="line"><span class="literal">true</span></div><div class="line">&gt; m.counter</div><div class="line"><span class="number">17</span></div></pre></td></tr></table></figure>
<p>上面代码中，参数<code>n</code>从10变为0的过程中，<code>even()</code>一共会执行6次，所以变量<code>counter</code>等于6。第二次调用<code>even()</code>时，参数<code>n</code>从20变为0，<code>even()</code>一共会执行11次，加上前面的6次，所以变量<code>counter</code>等于17。</p>
<p>这个例子要是改写成CommonJS，就根本无法执行，会报错。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// even.js</span></div><div class="line"><span class="keyword">var</span> odd = <span class="built_in">require</span>(<span class="string">'./odd'</span>);</div><div class="line"><span class="keyword">var</span> counter = <span class="number">0</span>;</div><div class="line">exports.counter = counter;</div><div class="line">exports.even = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">  counter++;</div><div class="line">  <span class="keyword">return</span> n == <span class="number">0</span> || odd(n - <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// odd.js</span></div><div class="line"><span class="keyword">var</span> even = <span class="built_in">require</span>(<span class="string">'./even'</span>).even;</div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> n != <span class="number">0</span> &amp;&amp; even(n - <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码中，<code>even.js</code>加载<code>odd.js</code>，而<code>odd.js</code>又去加载<code>even.js</code>，形成“循环加载”。这时，执行引擎就会输出<code>even.js</code>已经执行的部分（不存在任何结果），所以在<code>odd.js</code>之中，变量<code>even</code>等于<code>null</code>，等到后面调用<code>even(n-1)</code>就会报错。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ node</div><div class="line">&gt; var m = require(<span class="string">'./even'</span>);</div><div class="line">&gt; m.even(10)</div><div class="line">TypeError: even is not a <span class="keyword">function</span></div></pre></td></tr></table></figure>
<h2 id="跨模块常量"><a href="#跨模块常量" class="headerlink" title="跨模块常量"></a>跨模块常量</h2><p>上面说过，<code>const</code>声明的常量只在当前代码块有效。如果想设置跨模块的常量（即跨多个文件），可以采用下面的写法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// constants.js 模块</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> A = <span class="number">1</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> B = <span class="number">3</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> C = <span class="number">4</span>;</div><div class="line"></div><div class="line"><span class="comment">// test1.js 模块</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> constants <span class="keyword">from</span> <span class="string">'./constants'</span>;</div><div class="line"><span class="built_in">console</span>.log(constants.A); <span class="comment">// 1</span></div><div class="line"><span class="built_in">console</span>.log(constants.B); <span class="comment">// 3</span></div><div class="line"></div><div class="line"><span class="comment">// test2.js 模块</span></div><div class="line"><span class="keyword">import</span> &#123;A, B&#125; <span class="keyword">from</span> <span class="string">'./constants'</span>;</div><div class="line"><span class="built_in">console</span>.log(A); <span class="comment">// 1</span></div><div class="line"><span class="built_in">console</span>.log(B); <span class="comment">// 3</span></div></pre></td></tr></table></figure>
<h2 id="ES6模块的转码"><a href="#ES6模块的转码" class="headerlink" title="ES6模块的转码"></a>ES6模块的转码</h2><p>浏览器目前还不支持ES6模块，为了现在就能使用，可以将转为ES5的写法。除了Babel可以用来转码之外，还有以下两个方法，也可以用来转码。</p>
<h3 id="ES6-module-transpiler"><a href="#ES6-module-transpiler" class="headerlink" title="ES6 module transpiler"></a>ES6 module transpiler</h3><p><a href="https://github.com/esnext/es6-module-transpiler" target="_blank" rel="external">ES6 module transpiler</a>是square公司开源的一个转码器，可以将ES6模块转为CommonJS模块或AMD模块的写法，从而在浏览器中使用。</p>
<p>首先，安装这个转玛器。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g es6-module-transpiler</div></pre></td></tr></table></figure>
<p>然后，使用<code>compile-modules convert</code>命令，将ES6模块文件转码。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ compile-modules convert file1.js file2.js</div></pre></td></tr></table></figure>
<p><code>-o</code>参数可以指定转码后的文件名。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ compile-modules convert -o out.js file1.js</div></pre></td></tr></table></figure>
<h3 id="SystemJS"><a href="#SystemJS" class="headerlink" title="SystemJS"></a>SystemJS</h3><p>另一种解决方法是使用<a href="https://github.com/systemjs/systemjs" target="_blank" rel="external">SystemJS</a>。它是一个垫片库（polyfill），可以在浏览器内加载ES6模块、AMD模块和CommonJS模块，将其转为ES5格式。它在后台调用的是Google的Traceur转码器。</p>
<p>使用时，先在网页内载入system.js文件。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"system.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后，使用<code>System.import</code>方法加载模块文件。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  System.import(<span class="string">'./app.js'</span>);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上面代码中的<code>./app</code>，指的是当前目录下的app.js文件。它可以是ES6模块文件，<code>System.import</code>会自动将其转码。</p>
<p>需要注意的是，<code>System.import</code>使用异步加载，返回一个Promise对象，可以针对这个对象编程。下面是一个模块文件。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// app/es6-file.js:</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">q</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">this</span>.es6 = <span class="string">'hello'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后，在网页内加载这个模块文件。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">System.import(<span class="string">'app/es6-file'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">m</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">new</span> m.q().es6); <span class="comment">// hello</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上面代码中，<code>System.import</code>方法返回的是一个Promise对象，所以可以用then方法指定回调函数。</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2016/07/28/ES6模块学习笔记/es6.jpg&quot; alt=&quot;es6.jpg&quot; title=&quot;&quot;&gt;
&lt;blockquote&gt;&lt;p&gt;ECMAScript 6 在不久的未来将成为新的标准。对于日新月异的前端技术，我们要拥抱变化，享受ES6带来的美好。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="web开发" scheme="http://yoursite.com/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="web开发" scheme="http://yoursite.com/tags/web%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>npm学习笔记</title>
    <link href="http://yoursite.com/2016/07/20/npm%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/07/20/npm学习笔记/</id>
    <published>2016-07-19T16:00:00.000Z</published>
    <updated>2016-09-09T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2016/07/20/npm学习笔记/npm.png" alt="npm.png" title="">
<blockquote><p>本着夯实基础是关键的理念，所以之前一直潜心专研html5，css3和js。对于日新月异的前端工程化构建工具一直没去关注，现阶段，在我计划的学习路径中开始了解并且学习前端工程化思路和实现。npm，gulp，git，webpack和vue将是我后面学习的方向。</p>
</blockquote>
<a id="more"></a>
<h2 id="npm简介"><a href="#npm简介" class="headerlink" title="npm简介"></a><center>npm简介</center></h2><p>npm 是 2009 年开始的一个 javascript模块管理工具，也是最流行的代码共享平台之一。2013 年 npm<!--more--> 的模块总数是 4 万，2014 年就升到 8 万以上，超过所有其他同类平台。今年 4 月npm官方（<a href="http://blog.npmjs.org/post/143451680695/how-many-npm-users-are-there" target="_blank" rel="external">http://blog.npmjs.org/post/143451680695/how-many-npm-users-are-there</a> ）发了一份统计，截止 4 月全球估计有 4 百万用户使用 npm，并且这个数字每年会翻一倍。NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上<br>很多问题，常见的使用场景有以下几种：</p>
<ul>
<li>允许用户从NPM服务器下载别人编写的第三方包到本地使用。</li>
<li>允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。</li>
<li>允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</li>
</ul>
<p>npm不需要单独安装。在安装Node的时候，会连带一起安装npm。安装doe移步至<a href="https://nodejs.org/en/download/" target="_blank" rel="external">node官网</a>。另外，Node附带的npm如果不是最新版本，可以用下面的命令，更新到最新版本<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install npm@latest -g</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="npm命令大全"><a href="#npm命令大全" class="headerlink" title="npm命令大全"></a><center>npm命令大全</center></h2><h3 id="2-1简单查询"><a href="#2-1简单查询" class="headerlink" title="2.1简单查询"></a>2.1简单查询</h3><blockquote>
<p>查看 npm 命令列表<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm help</div></pre></td></tr></table></figure></p>
<p>查看各个命令的简单用法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm -l</div></pre></td></tr></table></figure></p>
<p>查看当前npm 的版本<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm -v</div></pre></td></tr></table></figure></p>
<p>查看 npm 的配置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm config list -l</div></pre></td></tr></table></figure></p>
<p>以树型结构列出当前项目安装的所有模块，以及它们依赖的模块<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm ls</div></pre></td></tr></table></figure></p>
<p>列出所有全局安装的模块<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm ls -g</div></pre></td></tr></table></figure></p>
<p>全局和本地的依赖包的安装路径<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm root - g </div><div class="line">$ npm root</div></pre></td></tr></table></figure></p>
<p>查看全局或者本地的依赖包<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm list -g </div><div class="line">$ npm list</div></pre></td></tr></table></figure></p>
<p>查看依赖包的package.json 的信息，也可以单独查找某一个配置项<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ npm view &lt;package name&gt; </div><div class="line">$ npm view &lt;package name&gt; dependencies  <span class="comment">//查看gulp包的依赖关系</span></div><div class="line">$ npm view &lt;package name&gt; repository.url  <span class="comment">//查看gulp包的源文件地址</span></div></pre></td></tr></table></figure></p>
<p>搜索远程资源库中的依赖包，当在需要发布一个依赖包的时候，可以用这个命令。查找是否已有依赖包<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm search &lt;package name&gt;</div></pre></td></tr></table></figure></p>
<p>查看某个包的信息<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm info &lt;package name&gt;</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="2-2-npm-init命令"><a href="#2-2-npm-init命令" class="headerlink" title="2.2  npm init命令"></a>2.2  npm init命令</h3><h4 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h4><p>npm init用来初始化生成一个新的package.json文件,package.json是基于nodejs项目必不可少的配置文件，它是存放在项目根目录的普通json文件.它会引导用户设置一系列配置，如果你觉得不用修改默认配置，一路回车就可以了。<br><span style="color:#931F1D">(注意：json文件内是不能写注释的，下面代码的注释是方便学习的笔记，一个最简单的例子)</span></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  "name": "test",   //项目名称（必须）</div><div class="line">  "version": "1.0.0",   //项目版本（必须）</div><div class="line">  "description": "This is for study npm project !",   //项目描述（必须）</div><div class="line">  "homepage": "",   //项目主页</div><div class="line">  "repository": &#123;    //项目资源库</div><div class="line">    "type": "git",</div><div class="line">    "url": "https://git.oschina.net/xxxx"</div><div class="line">  &#125;,</div><div class="line">  "author": &#123;    //项目作者信息</div><div class="line">    "name": "oysun",</div><div class="line">    "email": "web-oysun@qq.com"</div><div class="line">  &#125;,</div><div class="line">  "license": "ISC",    //项目许可协议</div><div class="line">  "devDependencies": &#123;    //项目依赖的插件</div><div class="line">    "gulp": "^3.8.11",</div><div class="line">    "gulp-less": "^3.0.0"</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Package-json-属性说明"><a href="#Package-json-属性说明" class="headerlink" title="Package.json 属性说明"></a>Package.json 属性说明</h4><p><code>name</code></p>
<ul>
<li>在package.json中最重要的就是name和version字段。他们都是必须的，如果没有就无法install。name和version一起组成的标识在假设中是唯一的。改变包应该同时改变version</li>
<li>这个名字可能会作为参数被传入require()，所以它应该比较短，但也要意义清晰</li>
<li>name必须小于等于214个字节，包括前缀名称在内（如xxx/xxxmodule）</li>
<li>name不能以”_”或”.”开头</li>
<li>不能含有大写字母</li>
<li>name会成为url的一部分，不能含有url非法字符</li>
<li>创建一个模块前可以先到后边的网址查查name是否已经被占用.<a href="https://www.npmjs.com/" target="_blank" rel="external">https://www.npmjs.com/</a></li>
</ul>
<p><code>version</code></p>
<ul>
<li>version必须可以被npm依赖的一个node-semver模块解析。具体规则见下面的dependencies模块</li>
</ul>
<p><code>description</code> </p>
<ul>
<li>一个描述，方便别人了解你的模块作用，搜索的时候也有用</li>
</ul>
<p><code>homepage</code></p>
<ul>
<li>这个项目主页url和url属性不同，如果你填写了url属性，npm注册工具会认为你把项目发布到其他地方了，获取模块的时候不会从npm官方仓库获取，而是会重定向到url属性配置的地址</li>
</ul>
<p><code>keywords</code></p>
<ul>
<li>一个字符串数组，方便别人搜索到本模块</li>
</ul>
<p><code>author</code></p>
<ul>
<li>包的作者姓名</li>
</ul>
<p><code>bugs</code></p>
<ul>
<li><p>你项目的提交问题的url和（或）邮件地址。这对遇到问题的屌丝很有帮助。例子：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attr">"url"</span> : <span class="string">"http://github.com/owner/project/issues"</span>,</div><div class="line">  <span class="attr">"email"</span> : <span class="string">"project@hostname.com"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>你可以指定一个或者指定两个。如果你只想提供一个url，那就不用对象了，字符串就行。<br>如果提供了url，它会被npm bugs命令使用。</p>
</li>
</ul>
<p><code>license</code></p>
<ul>
<li><p>指定一个许可证，让人知道使用的权利和限制的。最简单的方法是，假如你用一个像BSD或者MIT这样通用的许可证，就只需要指定一个许可证的名字，像这样：{ “license” : “BSD” }如果你有更复杂的许可条件，或者想要提供给更多地细节，可以这样:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">"licenses" : [</div><div class="line">  &#123; "type" : "MyLicense"</div><div class="line">  , "url" : "http://github.com/owner/project/path/to/license"</div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
</li>
<li><p>你可以在<a href="https://spdx.org/licenses/" target="_blank" rel="external">https://spdx.org/licenses/</a> 这个地址查阅协议列表</p>
</li>
</ul>
<p><code>files</code></p>
<ul>
<li>files是一个包含项目中的文件的数组。如果命名了一个文件夹，那也会包含文件夹中的文件。（除非被其他条件忽略了）你也可以提供一个.npmignore文件，让即使被包含在files字段中得文件被留下。其实就像.<code>gitignore</code>一样。</li>
<li><code>main</code></li>
<li>main字段配置一个文件名指向模块的入口程序。如果你包的名字叫foo，然后用户require(“foo”)，main配置的模块的exports对象会被返回。<br>这应该是一个相对于根目录的文件路径。对大对数模块而言，这个属性更多的是让模块有一个主入口文件，然而很多模块并不写这个属性</li>
</ul>
<p>bin`</p>
<ul>
<li><p>很多包都有一个或多个可执行的文件希望被放到PATH中。npm让妈妈再也不用担心了（实际上npm本身也是通过bin属性安装为一个可执行命令的）。要用这个功能，给package.json中的bin字段一个命令名到文件位置的map。初始化的时候npm会将他链接到prefix/bin（全局初始化）或者./node_modules/.bin/（本地初始化）。<br>比如，npm有：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attr">"bin"</span> : &#123; <span class="attr">"npm"</span> : <span class="string">"./cli.js"</span> &#125; &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>所以，当你初始化npm，它会创建一个符号链接到cli.js脚本到/usr/local/bin/npm。如果你只有一个可执行文件，并且名字和包名一样。那么你可以只用一个字符串，比如：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attr">"name"</span>: <span class="string">"my-program"</span></div><div class="line">, <span class="attr">"version"</span>: <span class="string">"1.2.5"</span></div><div class="line">, <span class="attr">"bin"</span>: <span class="string">"./path/to/program"</span> &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>结果和这个一样：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attr">"name"</span>: <span class="string">"my-program"</span></div><div class="line">, <span class="attr">"version"</span>: <span class="string">"1.2.5"</span></div><div class="line">, <span class="attr">"bin"</span> : &#123; <span class="attr">"my-program"</span> : <span class="string">"./path/to/program"</span> &#125; &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><code>man</code></p>
<ul>
<li><p>指定一个单一的文件或者一个文件数组供man程序使用。如果只提供一个单一的文件，那么它初始化后就是man<pkgname>的结果，而不管实际的文件名是神马，比如：</pkgname></p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attr">"name"</span> : <span class="string">"foo"</span></div><div class="line">, <span class="attr">"version"</span> : <span class="string">"1.2.3"</span></div><div class="line">, <span class="attr">"description"</span> : <span class="string">"A packaged foo fooer for fooing foos"</span></div><div class="line">, <span class="attr">"main"</span> : <span class="string">"foo.js"</span></div><div class="line">, <span class="attr">"man"</span> : <span class="string">"./man/doc.1"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>这样man foo就可以用到./man/doc.1文件了。如果文件名不是以包开头，那么它会被冠以前缀，下面的:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attr">"name"</span> : <span class="string">"foo"</span></div><div class="line">, <span class="attr">"version"</span> : <span class="string">"1.2.3"</span></div><div class="line">, <span class="attr">"description"</span> : <span class="string">"A packaged foo fooer for fooing foos"</span></div><div class="line">, <span class="attr">"main"</span> : <span class="string">"foo.js"</span></div><div class="line">, <span class="attr">"man"</span> : [ <span class="string">"./man/foo.1"</span>, <span class="string">"./man/bar.1"</span> ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>会为man foo和man foo-bar创建文件。man文件需要以数字结束，然后可选地压缩后以.gz为后缀。The number dictates which man section the file is installed into.</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attr">"name"</span> : <span class="string">"foo"</span></div><div class="line">, <span class="attr">"version"</span> : <span class="string">"1.2.3"</span></div><div class="line">, <span class="attr">"description"</span> : <span class="string">"A packaged foo fooer for fooing foos"</span></div><div class="line">, <span class="attr">"main"</span> : <span class="string">"foo.js"</span></div><div class="line">, <span class="attr">"man"</span> : [ <span class="string">"./man/foo.1"</span>, <span class="string">"./man/foo.2"</span> ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>会为man foo和man 2 foo创建。</p>
</li>
</ul>
<p><code>directories</code></p>
<ul>
<li>CommonJS Packages规范说明了几种方式让你可以用directorieshash标示出包得结构。如果看一下npm’s package.json，你会看到有directories标示出doc, lib, and man。<br>在未来，这个信息可能会被用到。</li>
</ul>
<p><code>directories.lib</code></p>
<ul>
<li>告其他人你的库文件夹在哪里。目前没有什么特别的东西需要用到lib文件夹，但确实是重要的元信息。</li>
</ul>
<p><code>directories.bin</code></p>
<ul>
<li>如果你指定一个“bin”目录，然后在那个文件夹中得所有文件都会被当做”bin”字段使用。如果你已经指定了“bin”字段，那这个就无效。</li>
</ul>
<p><code>directories.man</code></p>
<ul>
<li>一个放满man页面的文件夹。贴心地创建一个“man”字段。</li>
</ul>
<p><code>directories.doc</code></p>
<ul>
<li>在这个目录里边放一些markdown文件，可能最终有一天它们会被友好的展现出来（应该是在npm的网站上） 我要说话</li>
</ul>
<p><code>directories.example</code></p>
<ul>
<li>放一些示例脚本，或许某一天会有用</li>
</ul>
<p><code>repository</code></p>
<ul>
<li>指定你的代码存放的地方。这个对希望贡献的人有帮助。如果git仓库在github上，那么npm docs命令能找到你。这样做：<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">"repository" :</div><div class="line">  &#123; "type" : "git"</div><div class="line">  , "url" : "http://github.com/isaacs/npm.git"</div><div class="line">  &#125;</div><div class="line"></div><div class="line">"repository" :</div><div class="line">  &#123; "type" : "svn"</div><div class="line">  , "url" : "http://v8.googlecode.com/svn/trunk/"</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><code>scripts</code></p>
<ul>
<li>scripts属性是一个对象，里边指定了项目的生命周期个各个环节需要执行的命令。key是生命周期中的事件，value是要执行的命令。具体的内容有 install start stop 等，详见: <a href="https://docs.npmjs.com/misc/scripts" target="_blank" rel="external">https://docs.npmjs.com/misc/scripts</a></li>
</ul>
<p><code>config</code></p>
<ul>
<li><p>用来设置一些项目不怎么变化的项目配置，例如port等。用户用的时候可以使用如下用法：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http.createServer(...).listen(process.env.npm_package_config_port)</div></pre></td></tr></table></figure>
</li>
<li><p>可以通过npm config set foo:port 80来修改config。详见 <a href="https://docs.npmjs.com/misc/config" target="_blank" rel="external">https://docs.npmjs.com/misc/config</a></p>
</li>
</ul>
<p><code>dependencies</code></p>
<ul>
<li>dependencies属性是一个对象，配置模块依赖的模块列表，key是模块名称，value是版本范围，版本范围是一个字符，可以被一个或多个空格分割。dependencies也可以被指定为一个git地址或者一个压缩包地址。不要把测试工具或transpilers写到dependencies中。 下面是一些写法，详见<a href="https://docs.npmjs.com/misc/semver" target="_blank" rel="external">https://docs.npmjs.com/misc/semver</a></li>
</ul>
<p><code>devDependencies</code></p>
<ul>
<li>如果有人想要下载并使用你的模块，也许他们并不希望或需要下载一些你在开发过程中使用的额外的测试或者文档框架。在这种情况下，最好的方法是把这些依赖添加到devDependencies属性的对象中。这些模块会在npm link或者npm install的时候被安装，也可以像其他npm配置一样被管理，详见npm的config文档。对于一些跨平台的构建任务，例如把CoffeeScript编译成JavaScript，就可以通过在package.json的script属性里边配置prepublish脚本来完成这个任务，然后需要依赖的coffee-script模块就写在devDependencies属性种。例如:<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attr">"name"</span>: <span class="string">"ethopia-waza"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">"a delightfully fruity coffee varietal"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.2.3"</span>,</div><div class="line">  <span class="attr">"devDependencies"</span>: &#123;</div><div class="line">    <span class="attr">"coffee-script"</span>: <span class="string">"~1.6.3"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"prepublish"</span>: <span class="string">"coffee -o lib/ -c src/waza.coffee"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"main"</span>: <span class="string">"lib/waza.js"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2-3-包安装命令"><a href="#2-3-包安装命令" class="headerlink" title="2.3 包安装命令"></a>2.3 包安装命令</h3><p>npm的包安装分为本地安装（local）、全局安装（global）两种，从敲的命令行来看，差别只是有没有-g而已.</p>
<ul>
<li>但是代码中，直接通过require()的方式是没有办法调用全局安装的包的。全局的安装是供命令行使用的。</li>
<li>每个模块可以“全局安装”，也可以“本地安装”。“全局安装”指的是将一个模块安装到系统目录中，各个项目都可以调用。一般来说，全局安装只适用于工具模块，比如eslint和gulp。“本地安装”指的是将一个模块下载到当前项目的node_modules子目录，然后只有在项目目录之中，才能调用这个模块</li>
</ul>
<blockquote>
<p>本地安装<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install &lt;package name&gt;</div></pre></td></tr></table></figure></p>
<p>全局安装<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install &lt;package name&gt; -global</div><div class="line">$ npm install &lt;package name&gt; -g</div></pre></td></tr></table></figure></p>
<p>npm install也支持直接输入Github代码库地址<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install git:<span class="comment">//github.com/package/path.git</span></div><div class="line">$ npm install git:<span class="comment">//github.com/package/path.git#0.1.0</span></div></pre></td></tr></table></figure></p>
<p>install命令总是安装模块的最新版本，如果要安装模块的特定版本，可以在模块名后面加上@和版本号。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ npm install &lt;package name&gt;@latest</div><div class="line">$ npm install &lt;package name&gt;@<span class="number">0.1</span><span class="number">.1</span></div><div class="line">$ npm install &lt;package name&gt;@<span class="string">"&gt;=1.9.0 &lt;3.1.0"</span></div></pre></td></tr></table></figure></p>
<p>如果使用–save-exact参数，会在package.json文件指定安装模块的确切版本<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install &lt;package name&gt; --save-exact </div><div class="line">$ npm install &lt;package name&gt; -E</div></pre></td></tr></table></figure></p>
<p>安装包信息将加入到dependencies（生产阶段的依赖）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install &lt;package name&gt; --save </div><div class="line">$ npm install &lt;package name&gt; -S</div></pre></td></tr></table></figure></p>
<p>安装包信息将加入到devDependencies（开发阶段的依赖），所以开发阶段一般使用它<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install &lt;package name&gt; --save-dev </div><div class="line">$ npm install &lt;package name&gt; -D</div></pre></td></tr></table></figure></p>
</blockquote>
<p><em>install命令可以使用不同参数，指定所安装的模块属于哪一种性质的依赖关系，即出现在packages.json文件的哪一项中</em></p>
<blockquote>
<blockquote>
<p>–save：模块名将被添加到dependencies，可以简化为参数-S。<br>–save-dev: 模块名将被添加到devDependencies，可以简化为参数-D</p>
</blockquote>
</blockquote>
<p><span style="color:#931F1D;background-color:#fcf8e3;">一旦安装了某个模块，就可以在代码中用require命令加载这个模块。另外，模块的依赖都被写入了package.json文件后，他人打开项目的根目录（项目开源、内部团队合作），使用npm install命令可以根据dependencies配置安装所有的依赖包</span></p>
<h3 id="2-4-包移除，更新插件命令"><a href="#2-4-包移除，更新插件命令" class="headerlink" title="2.4 包移除，更新插件命令"></a>2.4 包移除，更新插件命令</h3><blockquote>
<p>卸载已安装的模块<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm uninstall &lt;package name&gt;</div></pre></td></tr></table></figure></p>
<p>检查本地有哪些本地包,列出需要更新的包的信息，需要更新的包的名称、当前版本号、最新的版本号等<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm outdated</div></pre></td></tr></table></figure></p>
<p>更新本地安装的某个模块和全局模块<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm update &lt;package name&gt;</div><div class="line">$ npm update  &lt;package name&gt; -g</div></pre></td></tr></table></figure></p>
<p>全部更新<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm update</div><div class="line">$ npm update -g</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="2-5-高级命令"><a href="#2-5-高级命令" class="headerlink" title="2.5 高级命令"></a>2.5 高级命令</h3><p>后续深入学习补充</p>
<h3 id="2-6-其它"><a href="#2-6-其它" class="headerlink" title="2.6 其它"></a>2.6 其它</h3><p>后续深入学习补充</p>
<hr>
<h2 id="npm使用技巧"><a href="#npm使用技巧" class="headerlink" title="npm使用技巧"></a><center>npm使用技巧</center></h2><p>【1】国内访问外网都很慢，甚至不能访问！大家都懂，都很无奈！<br>使用淘宝的npm国内镜像可以极大的提高包下载的速度<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ npm config set strict-ssl <span class="literal">false</span> <span class="comment">//取消ssl验证</span></div><div class="line">$ npm install -g cnpm --registry=https:<span class="comment">//registry.npm.taobao.org</span></div><div class="line"><span class="string">`</span></div></pre></td></tr></table></figure></p>
<p>【2】windows下无法直接删除node_modules，因为node_modules内部嵌套的子目录太多使用rimraf插件可以很好的解决问题<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install rimraf -g</div><div class="line">$ rimraf node_modules</div></pre></td></tr></table></figure></p>
<p>【3】npm默认将全局包和缓存文件放在C盘。如果想更改路劲可以这样设置：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm config set prefix <span class="string">"d:x\node"</span><span class="comment">//修改nodejs全局包的安装路径</span></div><div class="line">$ npm config set cache <span class="string">"D:\nodejs\npm-cache"</span> <span class="comment">//修改缓存路径</span></div></pre></td></tr></table></figure></p>
<p><span style="color:#931F1D;background-color:#fcf8e3;">注意：由于改变了module的默认地址，所以上面的用户变量都要跟着改变一下“用户变量”PATH”修改为你重新设置的路径，要不，使用module的时候会导致输入命令出现“xxx不是内部或外部命令，也不是可运行的程序或批处理文件”这个错误。</span></p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2016/07/20/npm学习笔记/npm.png&quot; alt=&quot;npm.png&quot; title=&quot;&quot;&gt;
&lt;blockquote&gt;&lt;p&gt;本着夯实基础是关键的理念，所以之前一直潜心专研html5，css3和js。对于日新月异的前端工程化构建工具一直没去关注，现阶段，在我计划的学习路径中开始了解并且学习前端工程化思路和实现。npm，gulp，git，webpack和vue将是我后面学习的方向。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="web开发" scheme="http://yoursite.com/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="web开发" scheme="http://yoursite.com/tags/web%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>【UI设计&amp;&amp;代码实现】demo2</title>
    <link href="http://yoursite.com/2016/05/14/%E3%80%90UI%E8%AE%BE%E8%AE%A1&amp;&amp;%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E3%80%91demo2/"/>
    <id>http://yoursite.com/2016/05/14/【UI设计&amp;&amp;代码实现】demo2/</id>
    <published>2016-05-13T16:00:00.000Z</published>
    <updated>2016-11-23T01:32:58.085Z</updated>
    
    <content type="html"><![CDATA[<img src="/2016/05/14/【UI设计&&代码实现】demo2/demo2-a.gif" alt="demo2-a.gif" title="">
<blockquote><p>创意圆环菜单其实是早在几年就已经很流行了，这种Material Design风格菜单实现起来其实挺简单的，只需要很少的css代码。</p>
</blockquote>
<a id="more"></a>
<hr>
<img src="/2016/05/14/【UI设计&&代码实现】demo2/demo2-b.gif" alt="demo2-b.gif" title=""> 
<img src="/2016/05/14/【UI设计&&代码实现】demo2/demo2-c.gif" alt="demo2-c.gif" title="">
<p>当然，这种圆环菜单一般都是用于手机端的。所以，对背景做了响应式。用手机观看最佳，在pc端。可以用浏览器的开发者工具模拟手机端来查看效果</p>
<img src="/2016/05/14/【UI设计&&代码实现】demo2/demo2-g.gif" alt="demo2-g.gif" title="">
<p>首先呢，这里共有7中效果，每种效果都用<code>&lt;section&gt;</code>标签包裹</p>
 <img src="/2016/05/14/【UI设计&&代码实现】demo2/a.png" alt="a.png" title="">
<p> 我们就举例第一种来分析吧，首先，你用css写五个圆形（这就不用说了吧），其中第一个圆环是开关按钮，z-index要写高一点，后面几个圆形呢，让其被包裹在一个容器里（<code>btn-list</code>类）</p>
<img src="/2016/05/14/【UI设计&&代码实现】demo2/b.png" alt="b.png" title="">
<p> 然后你设置<code>overflow: hidden</code>和<code>opacity: 0</code>。这样里面的圆环菜单就被隐藏了，能看见的就只有圆环开关。当你点击了圆环开关，圆环开关往左边移动，而里面的圆环菜单透明体逐渐为1，这就形成了css动画效果<br> <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"> <span class="selector-class">.model-0</span> <span class="selector-class">.float-btn-group</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">65px</span>;</div><div class="line">  <span class="attribute">padding-left</span>: <span class="number">15px</span>;</div><div class="line">  <span class="attribute">min-height</span>: <span class="number">65px</span>;</div><div class="line">  <span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.model-0</span> <span class="selector-class">.float-btn-group</span> <span class="selector-class">.btn-list</span> &#123;</div><div class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">215px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.model-0</span> <span class="selector-class">.float-btn-group</span><span class="selector-class">.open</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">285px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.model-0</span> <span class="selector-class">.float-btn-group</span><span class="selector-class">.open</span> <span class="selector-class">.btn-list</span> &#123;</div><div class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> 第二种呢，首先定位写好圆形开关和各个菜单的位置，然后就是使其透明度为0，添加<code>border-radius: 50%</code>创建圆形背景，当你点击开关，用transform的scale属性慢慢放大圆形菜单，形成动画效果。后面几种原理都是一样，至于圆形开关的原理，其实就给圆形开关增加一个类<code>open</code>,这样这个开关就有两种类，一种是<code>.float-btn-group</code>，一种是<code>.float-btn-group.open</code>。当没点击的时候，圆心开关是<code>.float-btn-group</code>的类，在其类选择下的圆形菜单列表透明度都是0，隐藏了。当点击开关的时候。则是<code>.float-btn-group.open</code>类，在其类下的圆形菜单透明度都是1.并且用css transition来做动画效果。所以，这些圆形菜单只需一行js代码就行了<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//       meun切换开关</span></div><div class="line">$(<span class="string">'.btn-triger'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="keyword">this</span>).closest(<span class="string">'.float-btn-group'</span>).toggleClass(<span class="string">'open'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2016/05/14/【UI设计&amp;&amp;代码实现】demo2/demo2-a.gif&quot; alt=&quot;demo2-a.gif&quot; title=&quot;&quot;&gt;
&lt;blockquote&gt;&lt;p&gt;创意圆环菜单其实是早在几年就已经很流行了，这种Material Design风格菜单实现起来其实挺简单的，只需要很少的css代码。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="web开发" scheme="http://yoursite.com/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="web开发" scheme="http://yoursite.com/tags/web%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>【UI设计&amp;&amp;代码实现】demo1</title>
    <link href="http://yoursite.com/2016/05/12/%E3%80%90UI%E8%AE%BE%E8%AE%A1&amp;&amp;%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E3%80%91demo1/"/>
    <id>http://yoursite.com/2016/05/12/【UI设计&amp;&amp;代码实现】demo1/</id>
    <published>2016-05-11T16:00:00.000Z</published>
    <updated>2016-11-23T01:32:16.127Z</updated>
    
    <content type="html"><![CDATA[<img src="/2016/05/12/【UI设计&&代码实现】demo1/demo1.gif" alt="demo1.gif" title="">
<blockquote><p>纯用css3完成的动画，学习借鉴国外danielcardoso大神的思路，巧妙的运用checkBox hack技术和css3的@keyframes动画实现的效果。</p>
</blockquote>
<a id="more"></a>
<hr>
<p>首先，我是用<code>&lt;input&gt;</code>元素和<code>&lt;label&gt;</code>元素的组合，在<code>&lt;label&gt;</code>元素中放置的是每一个input的具体内容。图标使用的是<a href="http://fontawesome.io/" target="_blank" rel="external">Font Awesome</a>.</p>
<img src="/2016/05/12/【UI设计&&代码实现】demo1/demo1-j-1.PNG" alt="demo1-j-1.PNG" title="">
<p>为了使得展示界面更美观，我用了自己收集的网页设计常用css3渐变背景，附上代码<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*渐变背景样式*/</span></div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">-webkit-perspective</span>: <span class="number">800px</span>;</div><div class="line">  <span class="attribute">perspective</span>: <span class="number">800px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">overflow</span>: hidden;</div><div class="line">  <span class="attribute">font-family</span>: <span class="string">'Gudea'</span>, sans-serif;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#EA5C54</span>;</div><div class="line">  <span class="comment">/*下面是背景渐变样式，根据不同浏览器hack*/</span></div><div class="line">  <span class="comment">/* FF3.6+  */</span></div><div class="line">  <span class="attribute">background</span>: <span class="built_in">-webkit-gradient</span>(linear, left top, right bottom, color-stop(0%, #EA5C54), <span class="built_in">color-stop</span>(100%, #bb6dec));</div><div class="line">  <span class="comment">/* Chrome,Safari4+ */</span></div><div class="line">  <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(-45deg, #EA5C54 0%, #bb6dec 100%);</div><div class="line">  <span class="comment">/* Chrome10+,Safari5.1+ */</span></div><div class="line">  <span class="comment">/* Opera 11.10+ */</span></div><div class="line">  <span class="comment">/* IE10+ */</span></div><div class="line">  <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(315deg, #EA5C54 0%, #bb6dec 100%);</div><div class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(135deg, #EA5C54 0%, #bb6dec 100%);</div><div class="line">  <span class="comment">/* W3C */</span></div><div class="line">  <span class="attribute">filter</span>: progid:DXImageTransform.Microsoft.<span class="built_in">gradient</span>( startColorstr=<span class="string">'#EA5C54 '</span>, endColorstr=<span class="string">'#bb6dec'</span>,GradientType=1 );</div><div class="line">  <span class="comment">/* IE6-9 回退机制 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>为什么每个块不用<code>&lt;div&gt;</code>而是用<code>input</code>和<code>label</code>标签呢？大家发现没有，这个动画中，当这四个input其中一个被选中时，其左侧有个放大的灰色图标出现动画。如果用div包裹我想得用js实现了，但是用input的checkBox hack的方法可以很巧妙的实现：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.app_inner</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.app_inner</span> <span class="selector-tag">input</span><span class="selector-attr">[type="radio"]</span> &#123;</div><div class="line">  <span class="attribute">display</span>: none;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.app_inner</span> <span class="selector-tag">input</span><span class="selector-attr">[type="radio"]</span><span class="selector-pseudo">:checked</span> + <span class="selector-tag">label</span> <span class="selector-class">.app_inner__tab</span> &#123;</div><div class="line">  <span class="attribute">height</span>: <span class="number">175px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.app_inner</span> <span class="selector-tag">input</span><span class="selector-attr">[type="radio"]</span><span class="selector-pseudo">:checked</span> + <span class="selector-tag">label</span> <span class="selector-class">.app_inner__tab</span> <span class="selector-class">.tab_right</span> &#123;</div><div class="line">  <span class="attribute">top</span>: <span class="number">39px</span>;</div><div class="line">  <span class="attribute">-webkit-transition</span>: all <span class="number">0.3s</span> <span class="number">0.2s</span> <span class="built_in">cubic-bezier</span>(0.455, 0.03, 0.515, 0.955);</div><div class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span> <span class="number">0.2s</span> <span class="built_in">cubic-bezier</span>(0.455, 0.03, 0.515, 0.955);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.app_inner</span> <span class="selector-tag">input</span><span class="selector-attr">[type="radio"]</span><span class="selector-pseudo">:not(checked)</span> + <span class="selector-tag">label</span> <span class="selector-class">.app_inner__tab</span> &#123;</div><div class="line">  <span class="attribute">height</span>: <span class="number">80px</span>;</div><div class="line">  <span class="attribute">border-left</span>: <span class="number">12px</span> solid <span class="built_in">rgba</span>(0, 0, 0, 0.12);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.app_inner</span> <span class="selector-tag">input</span><span class="selector-attr">[type="radio"]</span><span class="selector-pseudo">:not(checked)</span> + <span class="selector-tag">label</span> <span class="selector-class">.app_inner__tab</span> <span class="selector-class">.tab_right</span> &#123;</div><div class="line">  <span class="attribute">top</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">-webkit-transition</span>: all <span class="number">0.3s</span> <span class="number">0.3s</span> <span class="built_in">cubic-bezier</span>(0.455, 0.03, 0.515, 0.955);</div><div class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span> <span class="number">0.3s</span> <span class="built_in">cubic-bezier</span>(0.455, 0.03, 0.515, 0.955);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.app_inner</span> <span class="selector-tag">input</span><span class="selector-attr">[type="radio"]</span><span class="selector-pseudo">:checked</span> + <span class="selector-tag">label</span> <span class="selector-class">.app_inner__tab</span> <span class="selector-class">.tab_left</span> <span class="selector-class">.tab_left__image</span> &#123;</div><div class="line">  <span class="attribute">-webkit-animation</span>: move_in <span class="number">0.55s</span> <span class="number">0.05s</span> <span class="built_in">cubic-bezier</span>(0.455, 0.03, 0.515, 0.955) forwards;</div><div class="line">          <span class="attribute">animation</span>: move_in <span class="number">0.55s</span> <span class="number">0.05s</span> <span class="built_in">cubic-bezier</span>(0.455, 0.03, 0.515, 0.955) forwards;</div><div class="line">  <span class="attribute">-webkit-transition</span>: all <span class="number">0.3s</span> <span class="number">0.36s</span> <span class="built_in">cubic-bezier</span>(0.455, 0.03, 0.515, 0.955);</div><div class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span> <span class="number">0.36s</span> <span class="built_in">cubic-bezier</span>(0.455, 0.03, 0.515, 0.955);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.app_inner</span> <span class="selector-tag">input</span><span class="selector-attr">[type="radio"]</span><span class="selector-pseudo">:not(checked)</span> + <span class="selector-tag">label</span> <span class="selector-class">.app_inner__tab</span> <span class="selector-class">.tab_left</span> <span class="selector-class">.tab_left__image</span> &#123;</div><div class="line">  <span class="attribute">-webkit-animation</span>: move_out <span class="number">0.75s</span> <span class="number">0s</span> <span class="built_in">cubic-bezier</span>(0.455, 0.03, 0.515, 0.955) forwards;</div><div class="line">          <span class="attribute">animation</span>: move_out <span class="number">0.75s</span> <span class="number">0s</span> <span class="built_in">cubic-bezier</span>(0.455, 0.03, 0.515, 0.955) forwards;</div><div class="line">  <span class="attribute">-webkit-transition</span>: all <span class="number">0.3s</span> <span class="number">0.3s</span> <span class="built_in">cubic-bezier</span>(0.455, 0.03, 0.515, 0.955);</div><div class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span> <span class="number">0.3s</span> <span class="built_in">cubic-bezier</span>(0.455, 0.03, 0.515, 0.955);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.app_inner</span> <span class="selector-tag">input</span><span class="selector-attr">[type="radio"]</span><span class="selector-pseudo">:checked</span> + <span class="selector-tag">label</span> <span class="selector-class">.app_inner__tab</span> <span class="selector-class">.tab_left</span> <span class="selector-class">.big</span> &#123;</div><div class="line">  <span class="attribute">left</span>: <span class="number">260px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.app_inner</span> <span class="selector-tag">input</span><span class="selector-attr">[type="radio"]</span><span class="selector-pseudo">:not(checked)</span> + <span class="selector-tag">label</span> <span class="selector-class">.app_inner__tab</span> <span class="selector-class">.tab_left</span> <span class="selector-class">.big</span> &#123;</div><div class="line">  <span class="attribute">left</span>: <span class="number">400px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.app_inner</span> <span class="selector-tag">input</span><span class="selector-attr">[type="radio"]</span><span class="selector-pseudo">:checked</span> + <span class="selector-tag">label</span> <span class="selector-class">.app_inner__tab</span> <span class="selector-tag">h2</span> <span class="selector-tag">i</span> &#123;</div><div class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.app_inner</span> <span class="selector-tag">input</span><span class="selector-attr">[type="radio"]</span><span class="selector-pseudo">:not(checked)</span> + <span class="selector-tag">label</span> <span class="selector-class">.app_inner__tab</span> <span class="selector-tag">h2</span> <span class="selector-tag">i</span> &#123;</div><div class="line">  <span class="attribute">opacity</span>: .<span class="number">3</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>每一个块都是input，当input被选中时，就会出现这个灰色的大图标，相反，则隐藏大图标，这样就不需要使用js了。至于后面图标平滑的动画则是使用css3的@keyframes。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line">    @-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> move_out &#123;</div><div class="line">  0% &#123;</div><div class="line">    <span class="attribute">top</span>: <span class="number">47px</span>;</div><div class="line">  &#125;</div><div class="line">  100% &#123;</div><div class="line">    <span class="attribute">top</span>: <span class="number">200px</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">keyframes</span> move_out &#123;</div><div class="line">  0% &#123;</div><div class="line">    <span class="attribute">top</span>: <span class="number">47px</span>;</div><div class="line">  &#125;</div><div class="line">  100% &#123;</div><div class="line">    <span class="attribute">top</span>: <span class="number">200px</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> move_in &#123;</div><div class="line">  0% &#123;</div><div class="line">    <span class="attribute">top</span>: -<span class="number">200px</span>;</div><div class="line">  &#125;</div><div class="line">  100% &#123;</div><div class="line">    <span class="attribute">top</span>: <span class="number">47px</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">keyframes</span> move_in &#123;</div><div class="line">  0% &#123;</div><div class="line">    <span class="attribute">top</span>: -<span class="number">200px</span>;</div><div class="line">  &#125;</div><div class="line">  100% &#123;</div><div class="line">    <span class="attribute">top</span>: <span class="number">47px</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> bump &#123;</div><div class="line">  0% &#123;</div><div class="line">    <span class="attribute">top</span>: <span class="number">16px</span>;</div><div class="line">  &#125;</div><div class="line">  25% &#123;</div><div class="line">    <span class="attribute">top</span>: <span class="number">13px</span>;</div><div class="line">  &#125;</div><div class="line">  50% &#123;</div><div class="line">    <span class="attribute">top</span>: <span class="number">16px</span>;</div><div class="line">  &#125;</div><div class="line">  75% &#123;</div><div class="line">    <span class="attribute">top</span>: <span class="number">13px</span>;</div><div class="line">  &#125;</div><div class="line">  100% &#123;</div><div class="line">    <span class="attribute">top</span>: <span class="number">16px</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">keyframes</span> bump &#123;</div><div class="line">  0% &#123;</div><div class="line">    <span class="attribute">top</span>: <span class="number">16px</span>;</div><div class="line">  &#125;</div><div class="line">  25% &#123;</div><div class="line">    <span class="attribute">top</span>: <span class="number">13px</span>;</div><div class="line">  &#125;</div><div class="line">  50% &#123;</div><div class="line">    <span class="attribute">top</span>: <span class="number">16px</span>;</div><div class="line">  &#125;</div><div class="line">  75% &#123;</div><div class="line">    <span class="attribute">top</span>: <span class="number">13px</span>;</div><div class="line">  &#125;</div><div class="line">  100% &#123;</div><div class="line">    <span class="attribute">top</span>: <span class="number">16px</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> intro &#123;</div><div class="line">  0% &#123;</div><div class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translateY</span>(-50%) <span class="built_in">scale</span>(0) <span class="built_in">rotateX</span>(10deg) <span class="built_in">rotateY</span>(10deg) <span class="built_in">rotateZ</span>(40deg);</div><div class="line">            <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%) <span class="built_in">scale</span>(0) <span class="built_in">rotateX</span>(10deg) <span class="built_in">rotateY</span>(10deg) <span class="built_in">rotateZ</span>(40deg);</div><div class="line">  &#125;</div><div class="line">  100% &#123;</div><div class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translateY</span>(-50%) <span class="built_in">scale</span>(1) <span class="built_in">rotateX</span>(0deg) <span class="built_in">rotateY</span>(0deg) <span class="built_in">rotateZ</span>(0deg);</div><div class="line">            <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%) <span class="built_in">scale</span>(1) <span class="built_in">rotateX</span>(0deg) <span class="built_in">rotateY</span>(0deg) <span class="built_in">rotateZ</span>(0deg);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">keyframes</span> intro &#123;</div><div class="line">  0% &#123;</div><div class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translateY</span>(-50%) <span class="built_in">scale</span>(0) <span class="built_in">rotateX</span>(10deg) <span class="built_in">rotateY</span>(10deg) <span class="built_in">rotateZ</span>(40deg);</div><div class="line">            <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%) <span class="built_in">scale</span>(0) <span class="built_in">rotateX</span>(10deg) <span class="built_in">rotateY</span>(10deg) <span class="built_in">rotateZ</span>(40deg);</div><div class="line">  &#125;</div><div class="line">  100% &#123;</div><div class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translateY</span>(-50%) <span class="built_in">scale</span>(1) <span class="built_in">rotateX</span>(0deg) <span class="built_in">rotateY</span>(0deg) <span class="built_in">rotateZ</span>(0deg);</div><div class="line">            <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%) <span class="built_in">scale</span>(1) <span class="built_in">rotateX</span>(0deg) <span class="built_in">rotateY</span>(0deg) <span class="built_in">rotateZ</span>(0deg);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>至于@keyframes怎么写，其实有很多方法，可以使用css的开源动画库。我们经常用AE或者sketch做一些原型动画，可以使用脚本来导出xml格式的源文件，里面的动画关键帧参数可以使用来写css的@keyframes。</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2016/05/12/【UI设计&amp;&amp;代码实现】demo1/demo1.gif&quot; alt=&quot;demo1.gif&quot; title=&quot;&quot;&gt;
&lt;blockquote&gt;&lt;p&gt;纯用css3完成的动画，学习借鉴国外danielcardoso大神的思路，巧妙的运用checkBox hack技术和css3的@keyframes动画实现的效果。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="web开发" scheme="http://yoursite.com/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="web开发" scheme="http://yoursite.com/tags/web%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
</feed>
